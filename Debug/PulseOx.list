
PulseOx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f38  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c8  080061c8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061d0  080061d0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080061d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000084  0800625c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800625c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153bd  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002443  00000000  00000000  00035471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  000378b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  00038a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b7f9  00000000  00000000  00039b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014430  00000000  00000000  00065319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011825e  00000000  00000000  00079749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001919a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f84  00000000  00000000  001919f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000084 	.word	0x20000084
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080060e0 	.word	0x080060e0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000088 	.word	0x20000088
 80001fc:	080060e0 	.word	0x080060e0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b08b      	sub	sp, #44	; 0x2c
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fe16 	bl	80011ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 fa47 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fb7d 	bl	8000cc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c6:	f000 fa95 	bl	8000af4 <MX_ADC1_Init>
  MX_TIM6_Init();
 80005ca:	f000 fb43 	bl	8000c54 <MX_TIM6_Init>
  MX_LPUART1_UART_Init();
 80005ce:	f000 faf5 	bl	8000bbc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80005d2:	48a3      	ldr	r0, [pc, #652]	; (8000860 <main+0x2ac>)
 80005d4:	f003 ff22 	bl	800441c <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Turn off the RED LED
	  HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	48a1      	ldr	r0, [pc, #644]	; (8000864 <main+0x2b0>)
 80005e0:	f002 f9e8 	bl	80029b4 <HAL_GPIO_WritePin>
	  //Small Delay
	  HAL_Delay(10);
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 fe75 	bl	80012d4 <HAL_Delay>
	  //Turn on the IR LED
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f0:	489d      	ldr	r0, [pc, #628]	; (8000868 <main+0x2b4>)
 80005f2:	f002 f9df 	bl	80029b4 <HAL_GPIO_WritePin>
	  //Save old values of the IR LED
	  ledRED_2=ledRED_1;
 80005f6:	4b9d      	ldr	r3, [pc, #628]	; (800086c <main+0x2b8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a9d      	ldr	r2, [pc, #628]	; (8000870 <main+0x2bc>)
 80005fc:	6013      	str	r3, [r2, #0]
	  ledRED_1=ledRED_0;
 80005fe:	4b9d      	ldr	r3, [pc, #628]	; (8000874 <main+0x2c0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a9a      	ldr	r2, [pc, #616]	; (800086c <main+0x2b8>)
 8000604:	6013      	str	r3, [r2, #0]
	  //**************** Reading ADC Value of IR LED ***********************************
	  //Reading light value is done in a way where we measure sample the value with adc in a defined time slot (millisAverageCount)

	  //Set millis counter to 0 and turn on the timer
	  millisCounter=0;
 8000606:	4b9c      	ldr	r3, [pc, #624]	; (8000878 <main+0x2c4>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT(&htim6);
 800060c:	4894      	ldr	r0, [pc, #592]	; (8000860 <main+0x2ac>)
 800060e:	f003 ff05 	bl	800441c <HAL_TIM_Base_Start_IT>
	  //Make a reading every o.5 ms for millisAverageCount od millis seoconds. Usually for 20ms
	  do{
		averageRed += ADC_Read();
 8000612:	f000 fc05 	bl	8000e20 <ADC_Read>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	4b98      	ldr	r3, [pc, #608]	; (800087c <main+0x2c8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4413      	add	r3, r2
 8000620:	4a96      	ldr	r2, [pc, #600]	; (800087c <main+0x2c8>)
 8000622:	6013      	str	r3, [r2, #0]
		HAL_Delay(0.5);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fe55 	bl	80012d4 <HAL_Delay>
		n++;
 800062a:	4b95      	ldr	r3, [pc, #596]	; (8000880 <main+0x2cc>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	4a93      	ldr	r2, [pc, #588]	; (8000880 <main+0x2cc>)
 8000632:	6013      	str	r3, [r2, #0]
	  }
	  while(millisCounter <= millisAvergeCount);
 8000634:	4b90      	ldr	r3, [pc, #576]	; (8000878 <main+0x2c4>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b92      	ldr	r3, [pc, #584]	; (8000884 <main+0x2d0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	429a      	cmp	r2, r3
 800063e:	d9e8      	bls.n	8000612 <main+0x5e>

	  //We stop the timer
	  HAL_TIM_Base_Stop_IT(&htim6);
 8000640:	4887      	ldr	r0, [pc, #540]	; (8000860 <main+0x2ac>)
 8000642:	f003 ff5b 	bl	80044fc <HAL_TIM_Base_Stop_IT>
	  //Calculate the average value
	  ledRED_0 = averageRed/n - averageLight;
 8000646:	4b8d      	ldr	r3, [pc, #564]	; (800087c <main+0x2c8>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	4b8d      	ldr	r3, [pc, #564]	; (8000880 <main+0x2cc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000652:	4b8d      	ldr	r3, [pc, #564]	; (8000888 <main+0x2d4>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	4a86      	ldr	r2, [pc, #536]	; (8000874 <main+0x2c0>)
 800065a:	6013      	str	r3, [r2, #0]
	  averageRed = 0;
 800065c:	4b87      	ldr	r3, [pc, #540]	; (800087c <main+0x2c8>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
	  n = 0;
 8000662:	4b87      	ldr	r3, [pc, #540]	; (8000880 <main+0x2cc>)
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
	  //**********************************************************************************

	  //**************** Check if we got a new maximum in the past 3 readings ***********************************
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066e:	487e      	ldr	r0, [pc, #504]	; (8000868 <main+0x2b4>)
 8000670:	f002 f9a0 	bl	80029b4 <HAL_GPIO_WritePin>
	  if(ledRED_2<ledRED_1 && ledRED_1> ledRED_0)
 8000674:	4b7e      	ldr	r3, [pc, #504]	; (8000870 <main+0x2bc>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b7c      	ldr	r3, [pc, #496]	; (800086c <main+0x2b8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	d262      	bcs.n	8000746 <main+0x192>
 8000680:	4b7a      	ldr	r3, [pc, #488]	; (800086c <main+0x2b8>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b7b      	ldr	r3, [pc, #492]	; (8000874 <main+0x2c0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	429a      	cmp	r2, r3
 800068a:	d95c      	bls.n	8000746 <main+0x192>
	  {
		  //Software check so new maximum is not lower that the current minimum
		  if(ledRED_1>minRED) maxRED=ledRED_1;
 800068c:	4b77      	ldr	r3, [pc, #476]	; (800086c <main+0x2b8>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b7e      	ldr	r3, [pc, #504]	; (800088c <main+0x2d8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d903      	bls.n	80006a0 <main+0xec>
 8000698:	4b74      	ldr	r3, [pc, #464]	; (800086c <main+0x2b8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a7c      	ldr	r2, [pc, #496]	; (8000890 <main+0x2dc>)
 800069e:	6013      	str	r3, [r2, #0]

		  //We turn off the IR LED
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a6:	4870      	ldr	r0, [pc, #448]	; (8000868 <main+0x2b4>)
 80006a8:	f002 f984 	bl	80029b4 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 fe11 	bl	80012d4 <HAL_Delay>
		  //TUrn on the RED LED
		  HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	486a      	ldr	r0, [pc, #424]	; (8000864 <main+0x2b0>)
 80006ba:	f002 f97b 	bl	80029b4 <HAL_GPIO_WritePin>

		  //Do the same avergae reading of the adc value in a "millisAverageCount" interval. (probably measure for 20ms)
		  millisCounter=0;
 80006be:	4b6e      	ldr	r3, [pc, #440]	; (8000878 <main+0x2c4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 80006c4:	4866      	ldr	r0, [pc, #408]	; (8000860 <main+0x2ac>)
 80006c6:	f003 fea9 	bl	800441c <HAL_TIM_Base_Start_IT>
		  do{
			  averageIR += ADC_Read();
 80006ca:	f000 fba9 	bl	8000e20 <ADC_Read>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b70      	ldr	r3, [pc, #448]	; (8000894 <main+0x2e0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	4a6e      	ldr	r2, [pc, #440]	; (8000894 <main+0x2e0>)
 80006da:	6013      	str	r3, [r2, #0]
			  HAL_Delay(0.5);
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 fdf9 	bl	80012d4 <HAL_Delay>
			  n++;
 80006e2:	4b67      	ldr	r3, [pc, #412]	; (8000880 <main+0x2cc>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	4a65      	ldr	r2, [pc, #404]	; (8000880 <main+0x2cc>)
 80006ea:	6013      	str	r3, [r2, #0]
		 }while(millisCounter <= millisAvergeCount);
 80006ec:	4b62      	ldr	r3, [pc, #392]	; (8000878 <main+0x2c4>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b64      	ldr	r3, [pc, #400]	; (8000884 <main+0x2d0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d9e8      	bls.n	80006ca <main+0x116>

		 HAL_TIM_Base_Stop_IT(&htim6);
 80006f8:	4859      	ldr	r0, [pc, #356]	; (8000860 <main+0x2ac>)
 80006fa:	f003 feff 	bl	80044fc <HAL_TIM_Base_Stop_IT>
		 HAL_Delay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 fde8 	bl	80012d4 <HAL_Delay>
		 //CHeck that the new maximum is not lower than the current minimum
		 if(averageIR/n > minIR) maxIR = averageIR/n;
 8000704:	4b63      	ldr	r3, [pc, #396]	; (8000894 <main+0x2e0>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b5d      	ldr	r3, [pc, #372]	; (8000880 <main+0x2cc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000710:	4b61      	ldr	r3, [pc, #388]	; (8000898 <main+0x2e4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d907      	bls.n	8000728 <main+0x174>
 8000718:	4b5e      	ldr	r3, [pc, #376]	; (8000894 <main+0x2e0>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b58      	ldr	r3, [pc, #352]	; (8000880 <main+0x2cc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	fbb2 f3f3 	udiv	r3, r2, r3
 8000724:	4a5d      	ldr	r2, [pc, #372]	; (800089c <main+0x2e8>)
 8000726:	6013      	str	r3, [r2, #0]

		 //Reset all the values
		 averageIR=0;
 8000728:	4b5a      	ldr	r3, [pc, #360]	; (8000894 <main+0x2e0>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
		 n = 0;
 800072e:	4b54      	ldr	r3, [pc, #336]	; (8000880 <main+0x2cc>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
		 maxLedFound=1;
 8000734:	4b5a      	ldr	r3, [pc, #360]	; (80008a0 <main+0x2ec>)
 8000736:	2201      	movs	r2, #1
 8000738:	601a      	str	r2, [r3, #0]
		 //Turn off the LED
		 HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000740:	4848      	ldr	r0, [pc, #288]	; (8000864 <main+0x2b0>)
 8000742:	f002 f937 	bl	80029b4 <HAL_GPIO_WritePin>
	  	 }

	  //**************** Check if we got a new minimum in the past 3 readings ***********************************
	  if(ledRED_2>ledRED_1 && ledRED_1<ledRED_0 && maxLedFound)
 8000746:	4b4a      	ldr	r3, [pc, #296]	; (8000870 <main+0x2bc>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b48      	ldr	r3, [pc, #288]	; (800086c <main+0x2b8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	d960      	bls.n	8000814 <main+0x260>
 8000752:	4b46      	ldr	r3, [pc, #280]	; (800086c <main+0x2b8>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b47      	ldr	r3, [pc, #284]	; (8000874 <main+0x2c0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	d25a      	bcs.n	8000814 <main+0x260>
 800075e:	4b50      	ldr	r3, [pc, #320]	; (80008a0 <main+0x2ec>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d056      	beq.n	8000814 <main+0x260>
	  	{
		  //Software check so new minimum is not higher that the current maximum
		  if(ledRED_1<maxRED) minRED = ledRED_1;
 8000766:	4b41      	ldr	r3, [pc, #260]	; (800086c <main+0x2b8>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b49      	ldr	r3, [pc, #292]	; (8000890 <main+0x2dc>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	429a      	cmp	r2, r3
 8000770:	d203      	bcs.n	800077a <main+0x1c6>
 8000772:	4b3e      	ldr	r3, [pc, #248]	; (800086c <main+0x2b8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a45      	ldr	r2, [pc, #276]	; (800088c <main+0x2d8>)
 8000778:	6013      	str	r3, [r2, #0]

		  //
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000780:	4839      	ldr	r0, [pc, #228]	; (8000868 <main+0x2b4>)
 8000782:	f002 f917 	bl	80029b4 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8000786:	2001      	movs	r0, #1
 8000788:	f000 fda4 	bl	80012d4 <HAL_Delay>
		  HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	4834      	ldr	r0, [pc, #208]	; (8000864 <main+0x2b0>)
 8000794:	f002 f90e 	bl	80029b4 <HAL_GPIO_WritePin>

		  //ADC Reading in the same principle as above
		  millisCounter=0;
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <main+0x2c4>)
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 800079e:	4830      	ldr	r0, [pc, #192]	; (8000860 <main+0x2ac>)
 80007a0:	f003 fe3c 	bl	800441c <HAL_TIM_Base_Start_IT>
		  do{
			  averageIR += ADC_Read();
 80007a4:	f000 fb3c 	bl	8000e20 <ADC_Read>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b39      	ldr	r3, [pc, #228]	; (8000894 <main+0x2e0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	4a38      	ldr	r2, [pc, #224]	; (8000894 <main+0x2e0>)
 80007b4:	6013      	str	r3, [r2, #0]
			  HAL_Delay(0.5);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fd8c 	bl	80012d4 <HAL_Delay>
			  n++;
 80007bc:	4b30      	ldr	r3, [pc, #192]	; (8000880 <main+0x2cc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	4a2f      	ldr	r2, [pc, #188]	; (8000880 <main+0x2cc>)
 80007c4:	6013      	str	r3, [r2, #0]
		  }while(millisCounter <= millisAvergeCount);
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <main+0x2c4>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <main+0x2d0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d9e8      	bls.n	80007a4 <main+0x1f0>

		  HAL_TIM_Base_Stop_IT(&htim6);
 80007d2:	4823      	ldr	r0, [pc, #140]	; (8000860 <main+0x2ac>)
 80007d4:	f003 fe92 	bl	80044fc <HAL_TIM_Base_Stop_IT>
		  HAL_Delay(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f000 fd7b 	bl	80012d4 <HAL_Delay>
		  if(averageIR/n < maxIR) minIR = averageIR/n;
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <main+0x2e0>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <main+0x2cc>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <main+0x2e8>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d207      	bcs.n	8000802 <main+0x24e>
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <main+0x2e0>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <main+0x2cc>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4a26      	ldr	r2, [pc, #152]	; (8000898 <main+0x2e4>)
 8000800:	6013      	str	r3, [r2, #0]

		  averageIR=0;
 8000802:	4b24      	ldr	r3, [pc, #144]	; (8000894 <main+0x2e0>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
		  n = 0;
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <main+0x2cc>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
		  maxLedFound=0;
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <main+0x2ec>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
	  	}

	    //----Calculate R values for both LEDs
	  	R_RED = ((float)maxRED-(float)minRED)/(float)minRED;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <main+0x2dc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	ee07 3a90 	vmov	s15, r3
 800081c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <main+0x2d8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	ee07 3a90 	vmov	s15, r3
 8000828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800082c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <main+0x2d8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	ee07 3a90 	vmov	s15, r3
 8000838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800083c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <main+0x2f0>)
 8000842:	edc3 7a00 	vstr	s15, [r3]
	  	R_IR= ((float)maxIR-(float)minIR)/(float)minIR;
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <main+0x2e8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <main+0x2e4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	ee07 3a90 	vmov	s15, r3
 800085a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800085e:	e023      	b.n	80008a8 <main+0x2f4>
 8000860:	20000198 	.word	0x20000198
 8000864:	48001000 	.word	0x48001000
 8000868:	48001400 	.word	0x48001400
 800086c:	200001e8 	.word	0x200001e8
 8000870:	200001e4 	.word	0x200001e4
 8000874:	200001ec 	.word	0x200001ec
 8000878:	200001f4 	.word	0x200001f4
 800087c:	200001f8 	.word	0x200001f8
 8000880:	20000200 	.word	0x20000200
 8000884:	20000010 	.word	0x20000010
 8000888:	20000204 	.word	0x20000204
 800088c:	20000008 	.word	0x20000008
 8000890:	20000000 	.word	0x20000000
 8000894:	200001fc 	.word	0x200001fc
 8000898:	2000000c 	.word	0x2000000c
 800089c:	20000004 	.word	0x20000004
 80008a0:	200001f0 	.word	0x200001f0
 80008a4:	20000238 	.word	0x20000238
 80008a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80008ac:	4b5a      	ldr	r3, [pc, #360]	; (8000a18 <main+0x464>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	ee07 3a90 	vmov	s15, r3
 80008b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008bc:	4b57      	ldr	r3, [pc, #348]	; (8000a1c <main+0x468>)
 80008be:	edc3 7a00 	vstr	s15, [r3]

	  	//CHeck if finger is inserted (everyting above 2300 means no finger)
	  	if(ledRED_0<2300) {
 80008c2:	4b57      	ldr	r3, [pc, #348]	; (8000a20 <main+0x46c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f200 808d 	bhi.w	80009ea <main+0x436>

	  		//CHeck that the Ratio makes sense
	  		//If the value is bellow 0.5, means that the reading is okay so we calculate the
	  		// R
	  		// New R is added to the array of past (10) arrays
	  		if(R_IR / R_RED < 0.5) {
 80008d0:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <main+0x468>)
 80008d2:	edd3 6a00 	vldr	s13, [r3]
 80008d6:	4b53      	ldr	r3, [pc, #332]	; (8000a24 <main+0x470>)
 80008d8:	ed93 7a00 	vldr	s14, [r3]
 80008dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80008e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ec:	d51c      	bpl.n	8000928 <main+0x374>
	  			R_array[count] =  R_IR / R_RED ;
 80008ee:	4b4b      	ldr	r3, [pc, #300]	; (8000a1c <main+0x468>)
 80008f0:	edd3 6a00 	vldr	s13, [r3]
 80008f4:	4b4b      	ldr	r3, [pc, #300]	; (8000a24 <main+0x470>)
 80008f6:	ed93 7a00 	vldr	s14, [r3]
 80008fa:	4b4b      	ldr	r3, [pc, #300]	; (8000a28 <main+0x474>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000902:	4a4a      	ldr	r2, [pc, #296]	; (8000a2c <main+0x478>)
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4413      	add	r3, r2
 8000908:	edc3 7a00 	vstr	s15, [r3]
				if(count >=9) count = 0;
 800090c:	4b46      	ldr	r3, [pc, #280]	; (8000a28 <main+0x474>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b08      	cmp	r3, #8
 8000912:	d903      	bls.n	800091c <main+0x368>
 8000914:	4b44      	ldr	r3, [pc, #272]	; (8000a28 <main+0x474>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	e005      	b.n	8000928 <main+0x374>
				else count ++;
 800091c:	4b42      	ldr	r3, [pc, #264]	; (8000a28 <main+0x474>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <main+0x474>)
 8000926:	701a      	strb	r2, [r3, #0]
	  		}



	  		//We calculate the R value by averaging the last 10 measurements
	  		R_sum = 0;
 8000928:	4b41      	ldr	r3, [pc, #260]	; (8000a30 <main+0x47c>)
 800092a:	f04f 0200 	mov.w	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
			for(uint8_t loop = 0; loop < 9; loop++) {
 8000930:	2300      	movs	r3, #0
 8000932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000936:	e013      	b.n	8000960 <main+0x3ac>
				R_sum = R_sum + R_array[loop];
 8000938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800093c:	4a3b      	ldr	r2, [pc, #236]	; (8000a2c <main+0x478>)
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4413      	add	r3, r2
 8000942:	ed93 7a00 	vldr	s14, [r3]
 8000946:	4b3a      	ldr	r3, [pc, #232]	; (8000a30 <main+0x47c>)
 8000948:	edd3 7a00 	vldr	s15, [r3]
 800094c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000950:	4b37      	ldr	r3, [pc, #220]	; (8000a30 <main+0x47c>)
 8000952:	edc3 7a00 	vstr	s15, [r3]
			for(uint8_t loop = 0; loop < 9; loop++) {
 8000956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800095a:	3301      	adds	r3, #1
 800095c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000964:	2b08      	cmp	r3, #8
 8000966:	d9e7      	bls.n	8000938 <main+0x384>

			}
			R = R_sum/10.0;
 8000968:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <main+0x47c>)
 800096a:	ed93 7a00 	vldr	s14, [r3]
 800096e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000976:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <main+0x480>)
 8000978:	edc3 7a00 	vstr	s15, [r3]

			//******************* SO2 Calculation ****************************
			so2 = -10 * R + 100;
 800097c:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <main+0x480>)
 800097e:	edd3 7a00 	vldr	s15, [r3]
 8000982:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8000986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800098a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000a38 <main+0x484>
 800098e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <main+0x488>)
 8000994:	edc3 7a00 	vstr	s15, [r3]
			//****************************************************************

			//**** We send the values via LPUART to the PC **************************
			uint8_t msg[16]="HEllo";
 8000998:	4a29      	ldr	r2, [pc, #164]	; (8000a40 <main+0x48c>)
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a2:	6018      	str	r0, [r3, #0]
 80009a4:	3304      	adds	r3, #4
 80009a6:	8019      	strh	r1, [r3, #0]
 80009a8:	f107 031a 	add.w	r3, r7, #26
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	811a      	strh	r2, [r3, #8]
			sprintf(msg,"SO2: %d \n\r",(int)so2);
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <main+0x488>)
 80009b6:	edd3 7a00 	vldr	s15, [r3]
 80009ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	ee17 2a90 	vmov	r2, s15
 80009c6:	491f      	ldr	r1, [pc, #124]	; (8000a44 <main+0x490>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 ff1b 	bl	8005804 <siprintf>
			HAL_UART_Transmit(&hlpuart1, msg, strlen(msg), 100);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fc14 	bl	8000200 <strlen>
 80009d8:	4603      	mov	r3, r0
 80009da:	b29a      	uxth	r2, r3
 80009dc:	f107 0114 	add.w	r1, r7, #20
 80009e0:	2364      	movs	r3, #100	; 0x64
 80009e2:	4819      	ldr	r0, [pc, #100]	; (8000a48 <main+0x494>)
 80009e4:	f004 f890 	bl	8004b08 <HAL_UART_Transmit>
 80009e8:	e5f6      	b.n	80005d8 <main+0x24>
			//*******************************************************************
	  	} else {
	  		//If there is no finger we display "no finger" text
	  		uint8_t msg[16]="No finger \n\r";
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <main+0x498>)
 80009ec:	1d3c      	adds	r4, r7, #4
 80009ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009f0:	c407      	stmia	r4!, {r0, r1, r2}
 80009f2:	7023      	strb	r3, [r4, #0]
 80009f4:	f107 0311 	add.w	r3, r7, #17
 80009f8:	2200      	movs	r2, #0
 80009fa:	801a      	strh	r2, [r3, #0]
 80009fc:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(&hlpuart1, msg, strlen(msg), 100);
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fbfd 	bl	8000200 <strlen>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	1d39      	adds	r1, r7, #4
 8000a0c:	2364      	movs	r3, #100	; 0x64
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <main+0x494>)
 8000a10:	f004 f87a 	bl	8004b08 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin, GPIO_PIN_RESET);
 8000a14:	e5e0      	b.n	80005d8 <main+0x24>
 8000a16:	bf00      	nop
 8000a18:	2000000c 	.word	0x2000000c
 8000a1c:	2000023c 	.word	0x2000023c
 8000a20:	200001ec 	.word	0x200001ec
 8000a24:	20000238 	.word	0x20000238
 8000a28:	20000244 	.word	0x20000244
 8000a2c:	20000210 	.word	0x20000210
 8000a30:	20000240 	.word	0x20000240
 8000a34:	2000020c 	.word	0x2000020c
 8000a38:	42c80000 	.word	0x42c80000
 8000a3c:	20000208 	.word	0x20000208
 8000a40:	08006104 	.word	0x08006104
 8000a44:	080060f8 	.word	0x080060f8
 8000a48:	20000108 	.word	0x20000108
 8000a4c:	08006114 	.word	0x08006114

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b096      	sub	sp, #88	; 0x58
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2244      	movs	r2, #68	; 0x44
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 fec8 	bl	80057f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a76:	f001 ffd5 	bl	8002a24 <HAL_PWREx_ControlVoltageScaling>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a80:	f000 f9f4 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a84:	2310      	movs	r3, #16
 8000a86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a90:	2360      	movs	r3, #96	; 0x60
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 f869 	bl	8002b8c <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ac0:	f000 f9d4 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2103      	movs	r1, #3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 fc6f 	bl	80033c0 <HAL_RCC_ClockConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ae8:	f000 f9c0 	bl	8000e6c <Error_Handler>
  }
}
 8000aec:	bf00      	nop
 8000aee:	3758      	adds	r7, #88	; 0x58
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	463b      	mov	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b0a:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b0c:	4a29      	ldr	r2, [pc, #164]	; (8000bb4 <MX_ADC1_Init+0xc0>)
 8000b0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b16:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b28:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b6a:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b6c:	f000 fdb0 	bl	80016d0 <HAL_ADC_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000b76:	f000 f979 	bl	8000e6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_ADC1_Init+0xc4>)
 8000b7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7e:	2306      	movs	r3, #6
 8000b80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b86:	237f      	movs	r3, #127	; 0x7f
 8000b88:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <MX_ADC1_Init+0xbc>)
 8000b98:	f000 ffe6 	bl	8001b68 <HAL_ADC_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ba2:	f000 f963 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000a0 	.word	0x200000a0
 8000bb4:	50040000 	.word	0x50040000
 8000bb8:	04300002 	.word	0x04300002

08000bbc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000bc2:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <MX_LPUART1_UART_Init+0x94>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c04:	4811      	ldr	r0, [pc, #68]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000c06:	f003 ff2f 	bl	8004a68 <HAL_UART_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c10:	f000 f92c 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c14:	2100      	movs	r1, #0
 8000c16:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000c18:	f004 fcf8 	bl	800560c <HAL_UARTEx_SetTxFifoThreshold>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c22:	f000 f923 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c26:	2100      	movs	r1, #0
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000c2a:	f004 fd2d 	bl	8005688 <HAL_UARTEx_SetRxFifoThreshold>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c34:	f000 f91a 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_LPUART1_UART_Init+0x90>)
 8000c3a:	f004 fcae 	bl	800559a <HAL_UARTEx_DisableFifoMode>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c44:	f000 f912 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000108 	.word	0x20000108
 8000c50:	40008000 	.word	0x40008000

08000c54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_TIM6_Init+0x64>)
 8000c66:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <MX_TIM6_Init+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64000-1;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <MX_TIM6_Init+0x64>)
 8000c6c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_TIM6_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_TIM6_Init+0x64>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_TIM6_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_TIM6_Init+0x64>)
 8000c86:	f003 fb71 	bl	800436c <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c90:	f000 f8ec 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM6_Init+0x64>)
 8000ca2:	f003 fe3b 	bl	800491c <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000cac:	f000 f8de 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000198 	.word	0x20000198
 8000cbc:	40001000 	.word	0x40001000

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b45      	ldr	r3, [pc, #276]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a44      	ldr	r2, [pc, #272]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b42      	ldr	r3, [pc, #264]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cee:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a3e      	ldr	r2, [pc, #248]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000cf4:	f043 0320 	orr.w	r3, r3, #32
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0320 	and.w	r3, r3, #32
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d06:	4b39      	ldr	r3, [pc, #228]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a38      	ldr	r2, [pc, #224]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d0c:	f043 0310 	orr.w	r3, r3, #16
 8000d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d12:	4b36      	ldr	r3, [pc, #216]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1e:	4b33      	ldr	r3, [pc, #204]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a32      	ldr	r2, [pc, #200]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000d36:	f001 ff19 	bl	8002b6c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a2b      	ldr	r2, [pc, #172]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b29      	ldr	r3, [pc, #164]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a25      	ldr	r2, [pc, #148]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b23      	ldr	r3, [pc, #140]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d70:	481f      	ldr	r0, [pc, #124]	; (8000df0 <MX_GPIO_Init+0x130>)
 8000d72:	f001 fe1f 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7c:	481d      	ldr	r0, [pc, #116]	; (8000df4 <MX_GPIO_Init+0x134>)
 8000d7e:	f001 fe19 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	481c      	ldr	r0, [pc, #112]	; (8000df8 <MX_GPIO_Init+0x138>)
 8000d88:	f001 fe14 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	4812      	ldr	r0, [pc, #72]	; (8000df0 <MX_GPIO_Init+0x130>)
 8000da6:	f001 fc73 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_LED_Pin */
  GPIO_InitStruct.Pin = IR_LED_Pin;
 8000daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IR_LED_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_GPIO_Init+0x134>)
 8000dc4:	f001 fc64 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_GPIO_Init+0x138>)
 8000de0:	f001 fc56 	bl	8002690 <HAL_GPIO_Init>

}
 8000de4:	bf00      	nop
 8000de6:	3730      	adds	r7, #48	; 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40021000 	.word	0x40021000
 8000df0:	48001400 	.word	0x48001400
 8000df4:	48001000 	.word	0x48001000
 8000df8:	48000400 	.word	0x48000400

08000dfc <HAL_TIM_PeriodElapsedCallback>:
 * ADC measures voltage on photodiode (first RED then IR)
 * And then R value is computed from max in min values of both diodes.
 * @htim takes timer argument (htim6)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	millisCounter++;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e0c:	6013      	str	r3, [r2, #0]

	//averaged saturation at any heart beat
	//sumSaturation += instantSaturation;
	//numBeat++;

}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200001f4 	.word	0x200001f4

08000e20 <ADC_Read>:

int ADC_Read(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
	uint32_t adcValue = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
	sConfig.Channel = ADC_CHANNEL_1;
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <ADC_Read+0x40>)
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <ADC_Read+0x44>)
 8000e2e:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000e30:	490b      	ldr	r1, [pc, #44]	; (8000e60 <ADC_Read+0x40>)
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <ADC_Read+0x48>)
 8000e34:	f000 fe98 	bl	8001b68 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <ADC_Read+0x48>)
 8000e3a:	f000 fd95 	bl	8001968 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1,5)==HAL_OK){
 8000e3e:	2105      	movs	r1, #5
 8000e40:	4809      	ldr	r0, [pc, #36]	; (8000e68 <ADC_Read+0x48>)
 8000e42:	f000 fdf4 	bl	8001a2e <HAL_ADC_PollForConversion>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d103      	bne.n	8000e54 <ADC_Read+0x34>
		adcValue=HAL_ADC_GetValue(&hadc1);
 8000e4c:	4806      	ldr	r0, [pc, #24]	; (8000e68 <ADC_Read+0x48>)
 8000e4e:	f000 fe7d 	bl	8001b4c <HAL_ADC_GetValue>
 8000e52:	6078      	str	r0, [r7, #4]
	}
	return adcValue;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000248 	.word	0x20000248
 8000e64:	04300002 	.word	0x04300002
 8000e68:	200000a0 	.word	0x200000a0

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <Error_Handler+0x8>
	...

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_MspInit+0x44>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_MspInit+0x44>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6613      	str	r3, [r2, #96]	; 0x60
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_MspInit+0x44>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_MspInit+0x44>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_MspInit+0x44>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_MspInit+0x44>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0ae      	sub	sp, #184	; 0xb8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	2294      	movs	r2, #148	; 0x94
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 fc87 	bl	80057f4 <memset>
  if(hadc->Instance==ADC1)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <HAL_ADC_MspInit+0xc8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d146      	bne.n	8000f7e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ef0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ef4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ef6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000efe:	2301      	movs	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000f06:	2310      	movs	r3, #16
 8000f08:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 fd0b 	bl	800393c <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000f2c:	f7ff ff9e 	bl	8000e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_ADC_MspInit+0xcc>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <HAL_ADC_MspInit+0xcc>)
 8000f36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <HAL_ADC_MspInit+0xcc>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_ADC_MspInit+0xcc>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <HAL_ADC_MspInit+0xcc>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_ADC_MspInit+0xcc>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f60:	2301      	movs	r3, #1
 8000f62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f66:	230b      	movs	r3, #11
 8000f68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <HAL_ADC_MspInit+0xd0>)
 8000f7a:	f001 fb89 	bl	8002690 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	37b8      	adds	r7, #184	; 0xb8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	50040000 	.word	0x50040000
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	48000800 	.word	0x48000800

08000f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ae      	sub	sp, #184	; 0xb8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2294      	movs	r2, #148	; 0x94
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 fc1d 	bl	80057f4 <memset>
  if(huart->Instance==LPUART1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a22      	ldr	r2, [pc, #136]	; (8001048 <HAL_UART_MspInit+0xb4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d13d      	bne.n	8001040 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fcb3 	bl	800393c <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fdc:	f7ff ff46 	bl	8000e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_UART_MspInit+0xb8>)
 8000fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_UART_MspInit+0xb8>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_UART_MspInit+0xb8>)
 8000fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_UART_MspInit+0xb8>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_UART_MspInit+0xb8>)
 8000ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0xb8>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001010:	f001 fdac 	bl	8002b6c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001014:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800102e:	2308      	movs	r3, #8
 8001030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001034:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_UART_MspInit+0xbc>)
 800103c:	f001 fb28 	bl	8002690 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	37b8      	adds	r7, #184	; 0xb8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40008000 	.word	0x40008000
 800104c:	40021000 	.word	0x40021000
 8001050:	48001800 	.word	0x48001800

08001054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_TIM_Base_MspInit+0x44>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d113      	bne.n	800108e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <HAL_TIM_Base_MspInit+0x48>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	4a0c      	ldr	r2, [pc, #48]	; (800109c <HAL_TIM_Base_MspInit+0x48>)
 800106c:	f043 0310 	orr.w	r3, r3, #16
 8001070:	6593      	str	r3, [r2, #88]	; 0x58
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_TIM_Base_MspInit+0x48>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2036      	movs	r0, #54	; 0x36
 8001084:	f001 facd 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001088:	2036      	movs	r0, #54	; 0x36
 800108a:	f001 fae6 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40001000 	.word	0x40001000
 800109c:	40021000 	.word	0x40021000

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f000 f8d2 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <TIM6_DAC_IRQHandler+0x10>)
 80010fa:	f003 fa2e 	bl	800455a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000198 	.word	0x20000198

08001108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <_sbrk+0x5c>)
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <_sbrk+0x60>)
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <_sbrk+0x64>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <_sbrk+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	429a      	cmp	r2, r3
 8001136:	d207      	bcs.n	8001148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001138:	f004 fb32 	bl	80057a0 <__errno>
 800113c:	4603      	mov	r3, r0
 800113e:	220c      	movs	r2, #12
 8001140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e009      	b.n	800115c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <_sbrk+0x64>)
 8001158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200a0000 	.word	0x200a0000
 8001168:	00000400 	.word	0x00000400
 800116c:	20000260 	.word	0x20000260
 8001170:	20000278 	.word	0x20000278

08001174 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <SystemInit+0x20>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <SystemInit+0x20>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800119c:	f7ff ffea 	bl	8001174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	; (80011d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <LoopForever+0xe>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	; (80011e4 <LoopForever+0x16>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c6:	f004 faf1 	bl	80057ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ca:	f7ff f9f3 	bl	80005b4 <main>

080011ce <LoopForever>:

LoopForever:
    b LoopForever
 80011ce:	e7fe      	b.n	80011ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011d0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80011dc:	080061d8 	.word	0x080061d8
  ldr r2, =_sbss
 80011e0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80011e4:	20000278 	.word	0x20000278

080011e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_IRQHandler>

080011ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f001 fa09 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fa:	200f      	movs	r0, #15
 80011fc:	f000 f80e 	bl	800121c <HAL_InitTick>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	e001      	b.n	8001210 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800120c:	f7ff fe34 	bl	8000e78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001210:	79fb      	ldrb	r3, [r7, #7]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_InitTick+0x6c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d023      	beq.n	8001278 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_InitTick+0x70>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_InitTick+0x6c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fa15 	bl	8002676 <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10f      	bne.n	8001272 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d809      	bhi.n	800126c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f001 f9df 	bl	8002622 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_InitTick+0x74>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e007      	b.n	800127c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e004      	b.n	800127c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	e001      	b.n	800127c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000001c 	.word	0x2000001c
 800128c:	20000014 	.word	0x20000014
 8001290:	20000018 	.word	0x20000018

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000001c 	.word	0x2000001c
 80012b8:	20000264 	.word	0x20000264

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000264 	.word	0x20000264

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000001c 	.word	0x2000001c

0800131c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3360      	adds	r3, #96	; 0x60
 8001396:	461a      	mov	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <LL_ADC_SetOffset+0x44>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	4313      	orrs	r3, r2
 80013b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013bc:	bf00      	nop
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	03fff000 	.word	0x03fff000

080013cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3360      	adds	r3, #96	; 0x60
 80013da:	461a      	mov	r2, r3
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3360      	adds	r3, #96	; 0x60
 8001408:	461a      	mov	r2, r3
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	431a      	orrs	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	615a      	str	r2, [r3, #20]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800147a:	b480      	push	{r7}
 800147c:	b087      	sub	sp, #28
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	3330      	adds	r3, #48	; 0x30
 800148a:	461a      	mov	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	4413      	add	r3, r2
 8001498:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	211f      	movs	r1, #31
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	401a      	ands	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	0e9b      	lsrs	r3, r3, #26
 80014b2:	f003 011f 	and.w	r1, r3, #31
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	431a      	orrs	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014c6:	bf00      	nop
 80014c8:	371c      	adds	r7, #28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b087      	sub	sp, #28
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3314      	adds	r3, #20
 80014e2:	461a      	mov	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	0e5b      	lsrs	r3, r3, #25
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	4413      	add	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	0d1b      	lsrs	r3, r3, #20
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	2107      	movs	r1, #7
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	401a      	ands	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	0d1b      	lsrs	r3, r3, #20
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	431a      	orrs	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800151c:	bf00      	nop
 800151e:	371c      	adds	r7, #28
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001540:	43db      	mvns	r3, r3
 8001542:	401a      	ands	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0318 	and.w	r3, r3, #24
 800154a:	4908      	ldr	r1, [pc, #32]	; (800156c <LL_ADC_SetChannelSingleDiff+0x44>)
 800154c:	40d9      	lsrs	r1, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	400b      	ands	r3, r1
 8001552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001556:	431a      	orrs	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	0007ffff 	.word	0x0007ffff

08001570 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001580:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6093      	str	r3, [r2, #8]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015a8:	d101      	bne.n	80015ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015f8:	d101      	bne.n	80015fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800161c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <LL_ADC_IsEnabled+0x18>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <LL_ADC_IsEnabled+0x1a>
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800166a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800166e:	f043 0204 	orr.w	r2, r3, #4
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b04      	cmp	r3, #4
 8001694:	d101      	bne.n	800169a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d101      	bne.n	80016c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e12f      	b.n	800194a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d109      	bne.n	800170c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fbe1 	bl	8000ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff3f 	bl	8001594 <LL_ADC_IsDeepPowerDownEnabled>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff25 	bl	8001570 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff5a 	bl	80015e4 <LL_ADC_IsInternalRegulatorEnabled>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d115      	bne.n	8001762 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff3e 	bl	80015bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001740:	4b84      	ldr	r3, [pc, #528]	; (8001954 <HAL_ADC_Init+0x284>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	099b      	lsrs	r3, r3, #6
 8001746:	4a84      	ldr	r2, [pc, #528]	; (8001958 <HAL_ADC_Init+0x288>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	3301      	adds	r3, #1
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001754:	e002      	b.n	800175c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3b01      	subs	r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f9      	bne.n	8001756 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff3c 	bl	80015e4 <LL_ADC_IsInternalRegulatorEnabled>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10d      	bne.n	800178e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	f043 0210 	orr.w	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001782:	f043 0201 	orr.w	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff75 	bl	8001682 <LL_ADC_REG_IsConversionOngoing>
 8001798:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f040 80c8 	bne.w	8001938 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 80c4 	bne.w	8001938 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017b8:	f043 0202 	orr.w	r2, r3, #2
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff35 	bl	8001634 <LL_ADC_IsEnabled>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10b      	bne.n	80017e8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017d0:	4862      	ldr	r0, [pc, #392]	; (800195c <HAL_ADC_Init+0x28c>)
 80017d2:	f7ff ff2f 	bl	8001634 <LL_ADC_IsEnabled>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4619      	mov	r1, r3
 80017e2:	485f      	ldr	r0, [pc, #380]	; (8001960 <HAL_ADC_Init+0x290>)
 80017e4:	f7ff fd9a 	bl	800131c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7e5b      	ldrb	r3, [r3, #25]
 80017ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80017f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80017fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001806:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d106      	bne.n	8001824 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	3b01      	subs	r3, #1
 800181c:	045b      	lsls	r3, r3, #17
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_ADC_Init+0x294>)
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	69b9      	ldr	r1, [r7, #24]
 8001850:	430b      	orrs	r3, r1
 8001852:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff12 	bl	8001682 <LL_ADC_REG_IsConversionOngoing>
 800185e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff1f 	bl	80016a8 <LL_ADC_INJ_IsConversionOngoing>
 800186a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d140      	bne.n	80018f4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d13d      	bne.n	80018f4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7e1b      	ldrb	r3, [r3, #24]
 8001880:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001882:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800188a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800189a:	f023 0306 	bic.w	r3, r3, #6
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d118      	bne.n	80018e4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018bc:	f023 0304 	bic.w	r3, r3, #4
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018c8:	4311      	orrs	r1, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018ce:	4311      	orrs	r1, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018d4:	430a      	orrs	r2, r1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	e007      	b.n	80018f4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691a      	ldr	r2, [r3, #16]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d10c      	bne.n	8001916 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f023 010f 	bic.w	r1, r3, #15
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	1e5a      	subs	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
 8001914:	e007      	b.n	8001926 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020f 	bic.w	r2, r2, #15
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f023 0303 	bic.w	r3, r3, #3
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	659a      	str	r2, [r3, #88]	; 0x58
 8001936:	e007      	b.n	8001948 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	f043 0210 	orr.w	r2, r3, #16
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001948:	7ffb      	ldrb	r3, [r7, #31]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3720      	adds	r7, #32
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000014 	.word	0x20000014
 8001958:	053e2d63 	.word	0x053e2d63
 800195c:	50040000 	.word	0x50040000
 8001960:	50040300 	.word	0x50040300
 8001964:	fff0c007 	.word	0xfff0c007

08001968 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fe84 	bl	8001682 <LL_ADC_REG_IsConversionOngoing>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d14f      	bne.n	8001a20 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_ADC_Start+0x26>
 800198a:	2302      	movs	r3, #2
 800198c:	e04b      	b.n	8001a26 <HAL_ADC_Start+0xbe>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 fce2 	bl	8002360 <ADC_Enable>
 800199c:	4603      	mov	r3, r0
 800199e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d137      	bne.n	8001a16 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019c6:	d106      	bne.n	80019d6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019cc:	f023 0206 	bic.w	r2, r3, #6
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80019d4:	e002      	b.n	80019dc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	221c      	movs	r2, #28
 80019e2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fe23 	bl	800165a <LL_ADC_REG_StartConversion>
 8001a14:	e006      	b.n	8001a24 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001a1e:	e001      	b.n	8001a24 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a20:	2302      	movs	r3, #2
 8001a22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d102      	bne.n	8001a46 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001a40:	2308      	movs	r3, #8
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e010      	b.n	8001a68 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	f043 0220 	orr.w	r2, r3, #32
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e06f      	b.n	8001b44 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001a64:	2304      	movs	r3, #4
 8001a66:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a68:	f7ff fc28 	bl	80012bc <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a6e:	e021      	b.n	8001ab4 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a76:	d01d      	beq.n	8001ab4 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a78:	f7ff fc20 	bl	80012bc <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d302      	bcc.n	8001a8e <HAL_ADC_PollForConversion+0x60>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d112      	bne.n	8001ab4 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	f043 0204 	orr.w	r2, r3, #4
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e047      	b.n	8001b44 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0d6      	beq.n	8001a70 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fcbe 	bl	8001454 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d01c      	beq.n	8001b18 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7e5b      	ldrb	r3, [r3, #25]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d118      	bne.n	8001b18 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d111      	bne.n	8001b18 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d104      	bne.n	8001b30 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e008      	b.n	8001b42 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d103      	bne.n	8001b42 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b0b6      	sub	sp, #216	; 0xd8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x22>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e3d5      	b.n	8002336 <HAL_ADC_ConfigChannel+0x7ce>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fd73 	bl	8001682 <LL_ADC_REG_IsConversionOngoing>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 83ba 	bne.w	8002318 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d824      	bhi.n	8001bf6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	3b02      	subs	r3, #2
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d81b      	bhi.n	8001bee <HAL_ADC_ConfigChannel+0x86>
 8001bb6:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <HAL_ADC_ConfigChannel+0x54>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001bd5 	.word	0x08001bd5
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001be5 	.word	0x08001be5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	220c      	movs	r2, #12
 8001bd0:	605a      	str	r2, [r3, #4]
          break;
 8001bd2:	e011      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2212      	movs	r2, #18
 8001bd8:	605a      	str	r2, [r3, #4]
          break;
 8001bda:	e00d      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2218      	movs	r2, #24
 8001be0:	605a      	str	r2, [r3, #4]
          break;
 8001be2:	e009      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bea:	605a      	str	r2, [r3, #4]
          break;
 8001bec:	e004      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2206      	movs	r2, #6
 8001bf2:	605a      	str	r2, [r3, #4]
          break;
 8001bf4:	e000      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001bf6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	6859      	ldr	r1, [r3, #4]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	f7ff fc38 	bl	800147a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fd37 	bl	8001682 <LL_ADC_REG_IsConversionOngoing>
 8001c14:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fd43 	bl	80016a8 <LL_ADC_INJ_IsConversionOngoing>
 8001c22:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f040 81c1 	bne.w	8001fb2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f040 81bc 	bne.w	8001fb2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c42:	d10f      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7ff fc3f 	bl	80014d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fbe6 	bl	800142e <LL_ADC_SetSamplingTimeCommonConfig>
 8001c62:	e00e      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6819      	ldr	r1, [r3, #0]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	461a      	mov	r2, r3
 8001c72:	f7ff fc2e 	bl	80014d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fbd6 	bl	800142e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d00a      	beq.n	8001cba <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6919      	ldr	r1, [r3, #16]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cb4:	f7ff fb66 	bl	8001384 <LL_ADC_SetOffset>
 8001cb8:	e17b      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fb83 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10a      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x17e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fb78 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	0e9b      	lsrs	r3, r3, #26
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	e01e      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x1bc>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fb6d 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 8001d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001d14:	2320      	movs	r3, #32
 8001d16:	e004      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001d18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x1d4>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0e9b      	lsrs	r3, r3, #26
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	e018      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x206>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001d60:	2320      	movs	r3, #32
 8001d62:	e004      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001d64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d106      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fb3c 	bl	80013f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2101      	movs	r1, #1
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fb20 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10a      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x244>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fb15 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	f003 021f 	and.w	r2, r3, #31
 8001daa:	e01e      	b.n	8001dea <HAL_ADC_ConfigChannel+0x282>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2101      	movs	r1, #1
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fb0a 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001dce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001dd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001dda:	2320      	movs	r3, #32
 8001ddc:	e004      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x29a>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	e018      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x2cc>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e004      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001e2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d106      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2101      	movs	r1, #1
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fad9 	bl	80013f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fabd 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10a      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x30a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2102      	movs	r1, #2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fab2 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	e01e      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x348>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2102      	movs	r1, #2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff faa7 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	e004      	b.n	8001eae <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x360>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	0e9b      	lsrs	r3, r3, #26
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	e016      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x38e>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	e004      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ef0:	fab3 f383 	clz	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d106      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2200      	movs	r2, #0
 8001f00:	2102      	movs	r1, #2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fa78 	bl	80013f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2103      	movs	r1, #3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fa5c 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10a      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x3cc>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2103      	movs	r1, #3
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fa51 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	0e9b      	lsrs	r3, r3, #26
 8001f2e:	f003 021f 	and.w	r2, r3, #31
 8001f32:	e017      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x3fc>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2103      	movs	r1, #3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fa46 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f4e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001f56:	2320      	movs	r3, #32
 8001f58:	e003      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d105      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x414>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	e011      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x438>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001f94:	2320      	movs	r3, #32
 8001f96:	e003      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d106      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2103      	movs	r1, #3
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fa23 	bl	80013f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fb3c 	bl	8001634 <LL_ADC_IsEnabled>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 8140 	bne.w	8002244 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6819      	ldr	r1, [r3, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	f7ff faa9 	bl	8001528 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	4a8f      	ldr	r2, [pc, #572]	; (8002218 <HAL_ADC_ConfigChannel+0x6b0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	f040 8131 	bne.w	8002244 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10b      	bne.n	800200a <HAL_ADC_ConfigChannel+0x4a2>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0e9b      	lsrs	r3, r3, #26
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	bf94      	ite	ls
 8002002:	2301      	movls	r3, #1
 8002004:	2300      	movhi	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	e019      	b.n	800203e <HAL_ADC_ConfigChannel+0x4d6>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800201a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800201c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002022:	2320      	movs	r3, #32
 8002024:	e003      	b.n	800202e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	3301      	adds	r3, #1
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	2b09      	cmp	r3, #9
 8002036:	bf94      	ite	ls
 8002038:	2301      	movls	r3, #1
 800203a:	2300      	movhi	r3, #0
 800203c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800203e:	2b00      	cmp	r3, #0
 8002040:	d079      	beq.n	8002136 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204a:	2b00      	cmp	r3, #0
 800204c:	d107      	bne.n	800205e <HAL_ADC_ConfigChannel+0x4f6>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0e9b      	lsrs	r3, r3, #26
 8002054:	3301      	adds	r3, #1
 8002056:	069b      	lsls	r3, r3, #26
 8002058:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205c:	e015      	b.n	800208a <HAL_ADC_ConfigChannel+0x522>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800206c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800206e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002076:	2320      	movs	r3, #32
 8002078:	e003      	b.n	8002082 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800207a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	3301      	adds	r3, #1
 8002084:	069b      	lsls	r3, r3, #26
 8002086:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x542>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0e9b      	lsrs	r3, r3, #26
 800209c:	3301      	adds	r3, #1
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	e017      	b.n	80020da <HAL_ADC_ConfigChannel+0x572>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80020b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80020bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80020c2:	2320      	movs	r3, #32
 80020c4:	e003      	b.n	80020ce <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80020c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	ea42 0103 	orr.w	r1, r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10a      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x598>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	0e9b      	lsrs	r3, r3, #26
 80020f0:	3301      	adds	r3, #1
 80020f2:	f003 021f 	and.w	r2, r3, #31
 80020f6:	4613      	mov	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	051b      	lsls	r3, r3, #20
 80020fe:	e018      	b.n	8002132 <HAL_ADC_ConfigChannel+0x5ca>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800210e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e003      	b.n	8002124 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800211c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	3301      	adds	r3, #1
 8002126:	f003 021f 	and.w	r2, r3, #31
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002132:	430b      	orrs	r3, r1
 8002134:	e081      	b.n	800223a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213e:	2b00      	cmp	r3, #0
 8002140:	d107      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x5ea>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	3301      	adds	r3, #1
 800214a:	069b      	lsls	r3, r3, #26
 800214c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002150:	e015      	b.n	800217e <HAL_ADC_ConfigChannel+0x616>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800216a:	2320      	movs	r3, #32
 800216c:	e003      	b.n	8002176 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3301      	adds	r3, #1
 8002178:	069b      	lsls	r3, r3, #26
 800217a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_ADC_ConfigChannel+0x636>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0e9b      	lsrs	r3, r3, #26
 8002190:	3301      	adds	r3, #1
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	e017      	b.n	80021ce <HAL_ADC_ConfigChannel+0x666>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	61fb      	str	r3, [r7, #28]
  return result;
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80021b6:	2320      	movs	r3, #32
 80021b8:	e003      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	2101      	movs	r1, #1
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	ea42 0103 	orr.w	r1, r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10d      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x692>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	3301      	adds	r3, #1
 80021e6:	f003 021f 	and.w	r2, r3, #31
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	3b1e      	subs	r3, #30
 80021f2:	051b      	lsls	r3, r3, #20
 80021f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021f8:	e01e      	b.n	8002238 <HAL_ADC_ConfigChannel+0x6d0>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	613b      	str	r3, [r7, #16]
  return result;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002212:	2320      	movs	r3, #32
 8002214:	e006      	b.n	8002224 <HAL_ADC_ConfigChannel+0x6bc>
 8002216:	bf00      	nop
 8002218:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	f003 021f 	and.w	r2, r3, #31
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	3b1e      	subs	r3, #30
 8002232:	051b      	lsls	r3, r3, #20
 8002234:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002238:	430b      	orrs	r3, r1
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	6892      	ldr	r2, [r2, #8]
 800223e:	4619      	mov	r1, r3
 8002240:	f7ff f947 	bl	80014d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_ADC_ConfigChannel+0x7d8>)
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d06c      	beq.n	800232a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002250:	483c      	ldr	r0, [pc, #240]	; (8002344 <HAL_ADC_ConfigChannel+0x7dc>)
 8002252:	f7ff f889 	bl	8001368 <LL_ADC_GetCommonPathInternalCh>
 8002256:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a3a      	ldr	r2, [pc, #232]	; (8002348 <HAL_ADC_ConfigChannel+0x7e0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d127      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002264:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d121      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a35      	ldr	r2, [pc, #212]	; (800234c <HAL_ADC_ConfigChannel+0x7e4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d157      	bne.n	800232a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800227a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800227e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002282:	4619      	mov	r1, r3
 8002284:	482f      	ldr	r0, [pc, #188]	; (8002344 <HAL_ADC_ConfigChannel+0x7dc>)
 8002286:	f7ff f85c 	bl	8001342 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800228a:	4b31      	ldr	r3, [pc, #196]	; (8002350 <HAL_ADC_ConfigChannel+0x7e8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	099b      	lsrs	r3, r3, #6
 8002290:	4a30      	ldr	r2, [pc, #192]	; (8002354 <HAL_ADC_ConfigChannel+0x7ec>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022a4:	e002      	b.n	80022ac <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f9      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022b2:	e03a      	b.n	800232a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a27      	ldr	r2, [pc, #156]	; (8002358 <HAL_ADC_ConfigChannel+0x7f0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d113      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x77e>
 80022be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1f      	ldr	r2, [pc, #124]	; (800234c <HAL_ADC_ConfigChannel+0x7e4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d12a      	bne.n	800232a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022dc:	4619      	mov	r1, r3
 80022de:	4819      	ldr	r0, [pc, #100]	; (8002344 <HAL_ADC_ConfigChannel+0x7dc>)
 80022e0:	f7ff f82f 	bl	8001342 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022e4:	e021      	b.n	800232a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a1c      	ldr	r2, [pc, #112]	; (800235c <HAL_ADC_ConfigChannel+0x7f4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d11c      	bne.n	800232a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d116      	bne.n	800232a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a12      	ldr	r2, [pc, #72]	; (800234c <HAL_ADC_ConfigChannel+0x7e4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d111      	bne.n	800232a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002306:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800230a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800230e:	4619      	mov	r1, r3
 8002310:	480c      	ldr	r0, [pc, #48]	; (8002344 <HAL_ADC_ConfigChannel+0x7dc>)
 8002312:	f7ff f816 	bl	8001342 <LL_ADC_SetCommonPathInternalCh>
 8002316:	e008      	b.n	800232a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f043 0220 	orr.w	r2, r3, #32
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002332:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002336:	4618      	mov	r0, r3
 8002338:	37d8      	adds	r7, #216	; 0xd8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	80080000 	.word	0x80080000
 8002344:	50040300 	.word	0x50040300
 8002348:	c7520000 	.word	0xc7520000
 800234c:	50040000 	.word	0x50040000
 8002350:	20000014 	.word	0x20000014
 8002354:	053e2d63 	.word	0x053e2d63
 8002358:	cb840000 	.word	0xcb840000
 800235c:	80000001 	.word	0x80000001

08002360 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff f95f 	bl	8001634 <LL_ADC_IsEnabled>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d169      	bne.n	8002450 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	4b36      	ldr	r3, [pc, #216]	; (800245c <ADC_Enable+0xfc>)
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00d      	beq.n	80023a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f043 0210 	orr.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e055      	b.n	8002452 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f92e 	bl	800160c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80023b0:	482b      	ldr	r0, [pc, #172]	; (8002460 <ADC_Enable+0x100>)
 80023b2:	f7fe ffd9 	bl	8001368 <LL_ADC_GetCommonPathInternalCh>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023c0:	4b28      	ldr	r3, [pc, #160]	; (8002464 <ADC_Enable+0x104>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	4a28      	ldr	r2, [pc, #160]	; (8002468 <ADC_Enable+0x108>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80023da:	e002      	b.n	80023e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	3b01      	subs	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f9      	bne.n	80023dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023e8:	f7fe ff68 	bl	80012bc <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023ee:	e028      	b.n	8002442 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f91d 	bl	8001634 <LL_ADC_IsEnabled>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d104      	bne.n	800240a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f901 	bl	800160c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800240a:	f7fe ff57 	bl	80012bc <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d914      	bls.n	8002442 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b01      	cmp	r3, #1
 8002424:	d00d      	beq.n	8002442 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	f043 0210 	orr.w	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e007      	b.n	8002452 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d1cf      	bne.n	80023f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	8000003f 	.word	0x8000003f
 8002460:	50040300 	.word	0x50040300
 8002464:	20000014 	.word	0x20000014
 8002468:	053e2d63 	.word	0x053e2d63

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	; (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	; (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f7ff ff8e 	bl	800250c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff29 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff3e 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff8e 	bl	8002560 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5d 	bl	800250c <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff31 	bl	80024d0 <__NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa2 	bl	80025c8 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269e:	e166      	b.n	800296e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8158 	beq.w	8002968 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d005      	beq.n	80026d0 <HAL_GPIO_Init+0x40>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d130      	bne.n	8002732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002706:	2201      	movs	r2, #1
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 0201 	and.w	r2, r3, #1
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b03      	cmp	r3, #3
 800273c:	d017      	beq.n	800276e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d123      	bne.n	80027c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	220f      	movs	r2, #15
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	08da      	lsrs	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3208      	adds	r2, #8
 80027bc:	6939      	ldr	r1, [r7, #16]
 80027be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2203      	movs	r2, #3
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0203 	and.w	r2, r3, #3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80b2 	beq.w	8002968 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002804:	4b61      	ldr	r3, [pc, #388]	; (800298c <HAL_GPIO_Init+0x2fc>)
 8002806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002808:	4a60      	ldr	r2, [pc, #384]	; (800298c <HAL_GPIO_Init+0x2fc>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6613      	str	r3, [r2, #96]	; 0x60
 8002810:	4b5e      	ldr	r3, [pc, #376]	; (800298c <HAL_GPIO_Init+0x2fc>)
 8002812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800281c:	4a5c      	ldr	r2, [pc, #368]	; (8002990 <HAL_GPIO_Init+0x300>)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002846:	d02b      	beq.n	80028a0 <HAL_GPIO_Init+0x210>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a52      	ldr	r2, [pc, #328]	; (8002994 <HAL_GPIO_Init+0x304>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d025      	beq.n	800289c <HAL_GPIO_Init+0x20c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a51      	ldr	r2, [pc, #324]	; (8002998 <HAL_GPIO_Init+0x308>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d01f      	beq.n	8002898 <HAL_GPIO_Init+0x208>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a50      	ldr	r2, [pc, #320]	; (800299c <HAL_GPIO_Init+0x30c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d019      	beq.n	8002894 <HAL_GPIO_Init+0x204>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a4f      	ldr	r2, [pc, #316]	; (80029a0 <HAL_GPIO_Init+0x310>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d013      	beq.n	8002890 <HAL_GPIO_Init+0x200>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a4e      	ldr	r2, [pc, #312]	; (80029a4 <HAL_GPIO_Init+0x314>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00d      	beq.n	800288c <HAL_GPIO_Init+0x1fc>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a4d      	ldr	r2, [pc, #308]	; (80029a8 <HAL_GPIO_Init+0x318>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d007      	beq.n	8002888 <HAL_GPIO_Init+0x1f8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a4c      	ldr	r2, [pc, #304]	; (80029ac <HAL_GPIO_Init+0x31c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d101      	bne.n	8002884 <HAL_GPIO_Init+0x1f4>
 8002880:	2307      	movs	r3, #7
 8002882:	e00e      	b.n	80028a2 <HAL_GPIO_Init+0x212>
 8002884:	2308      	movs	r3, #8
 8002886:	e00c      	b.n	80028a2 <HAL_GPIO_Init+0x212>
 8002888:	2306      	movs	r3, #6
 800288a:	e00a      	b.n	80028a2 <HAL_GPIO_Init+0x212>
 800288c:	2305      	movs	r3, #5
 800288e:	e008      	b.n	80028a2 <HAL_GPIO_Init+0x212>
 8002890:	2304      	movs	r3, #4
 8002892:	e006      	b.n	80028a2 <HAL_GPIO_Init+0x212>
 8002894:	2303      	movs	r3, #3
 8002896:	e004      	b.n	80028a2 <HAL_GPIO_Init+0x212>
 8002898:	2302      	movs	r3, #2
 800289a:	e002      	b.n	80028a2 <HAL_GPIO_Init+0x212>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_GPIO_Init+0x212>
 80028a0:	2300      	movs	r3, #0
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	f002 0203 	and.w	r2, r2, #3
 80028a8:	0092      	lsls	r2, r2, #2
 80028aa:	4093      	lsls	r3, r2
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028b2:	4937      	ldr	r1, [pc, #220]	; (8002990 <HAL_GPIO_Init+0x300>)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028c0:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_GPIO_Init+0x320>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028e4:	4a32      	ldr	r2, [pc, #200]	; (80029b0 <HAL_GPIO_Init+0x320>)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028ea:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <HAL_GPIO_Init+0x320>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800290e:	4a28      	ldr	r2, [pc, #160]	; (80029b0 <HAL_GPIO_Init+0x320>)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002914:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <HAL_GPIO_Init+0x320>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002938:	4a1d      	ldr	r2, [pc, #116]	; (80029b0 <HAL_GPIO_Init+0x320>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <HAL_GPIO_Init+0x320>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002962:	4a13      	ldr	r2, [pc, #76]	; (80029b0 <HAL_GPIO_Init+0x320>)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3301      	adds	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	f47f ae91 	bne.w	80026a0 <HAL_GPIO_Init+0x10>
  }
}
 800297e:	bf00      	nop
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	40021000 	.word	0x40021000
 8002990:	40010000 	.word	0x40010000
 8002994:	48000400 	.word	0x48000400
 8002998:	48000800 	.word	0x48000800
 800299c:	48000c00 	.word	0x48000c00
 80029a0:	48001000 	.word	0x48001000
 80029a4:	48001400 	.word	0x48001400
 80029a8:	48001800 	.word	0x48001800
 80029ac:	48001c00 	.word	0x48001c00
 80029b0:	40010400 	.word	0x40010400

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029d0:	e002      	b.n	80029d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029e8:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f4:	d102      	bne.n	80029fc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80029f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fa:	e00b      	b.n	8002a14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0a:	d102      	bne.n	8002a12 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a10:	e000      	b.n	8002a14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002a12:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40007000 	.word	0x40007000

08002a24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d141      	bne.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a32:	4b4b      	ldr	r3, [pc, #300]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3e:	d131      	bne.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a40:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a46:	4a46      	ldr	r2, [pc, #280]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a50:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a58:	4a41      	ldr	r2, [pc, #260]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a60:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2232      	movs	r2, #50	; 0x32
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	4a3f      	ldr	r2, [pc, #252]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	0c9b      	lsrs	r3, r3, #18
 8002a72:	3301      	adds	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a76:	e002      	b.n	8002a7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a7e:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8a:	d102      	bne.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f2      	bne.n	8002a78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a92:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9e:	d158      	bne.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e057      	b.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aa4:	4b2e      	ldr	r3, [pc, #184]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aaa:	4a2d      	ldr	r2, [pc, #180]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ab0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ab4:	e04d      	b.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002abc:	d141      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002abe:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aca:	d131      	bne.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002acc:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad2:	4a23      	ldr	r2, [pc, #140]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002adc:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ae4:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2232      	movs	r2, #50	; 0x32
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	0c9b      	lsrs	r3, r3, #18
 8002afe:	3301      	adds	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b02:	e002      	b.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b16:	d102      	bne.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f2      	bne.n	8002b04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2a:	d112      	bne.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e011      	b.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b36:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b40:	e007      	b.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b42:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b4a:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b50:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40007000 	.word	0x40007000
 8002b64:	20000014 	.word	0x20000014
 8002b68:	431bde83 	.word	0x431bde83

08002b6c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7a:	6053      	str	r3, [r2, #4]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40007000 	.word	0x40007000

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f000 bc08 	b.w	80033b0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba0:	4b96      	ldr	r3, [pc, #600]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002baa:	4b94      	ldr	r3, [pc, #592]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80e4 	beq.w	8002d8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x4c>
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	f040 808b 	bne.w	8002ce6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	f040 8087 	bne.w	8002ce6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bd8:	4b88      	ldr	r3, [pc, #544]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x64>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e3df      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	4b81      	ldr	r3, [pc, #516]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <HAL_RCC_OscConfig+0x7e>
 8002c00:	4b7e      	ldr	r3, [pc, #504]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c08:	e005      	b.n	8002c16 <HAL_RCC_OscConfig+0x8a>
 8002c0a:	4b7c      	ldr	r3, [pc, #496]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d223      	bcs.n	8002c62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fdcc 	bl	80037bc <RCC_SetFlashLatencyFromMSIRange>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e3c0      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2e:	4b73      	ldr	r3, [pc, #460]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a72      	ldr	r2, [pc, #456]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b70      	ldr	r3, [pc, #448]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	496d      	ldr	r1, [pc, #436]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c4c:	4b6b      	ldr	r3, [pc, #428]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	4968      	ldr	r1, [pc, #416]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	e025      	b.n	8002cae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c62:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c68:	f043 0308 	orr.w	r3, r3, #8
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4960      	ldr	r1, [pc, #384]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c80:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	495b      	ldr	r1, [pc, #364]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fd8c 	bl	80037bc <RCC_SetFlashLatencyFromMSIRange>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e380      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cae:	f000 fcc1 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	4b51      	ldr	r3, [pc, #324]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	4950      	ldr	r1, [pc, #320]	; (8002e00 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	5ccb      	ldrb	r3, [r1, r3]
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	4a4e      	ldr	r2, [pc, #312]	; (8002e04 <HAL_RCC_OscConfig+0x278>)
 8002ccc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cce:	4b4e      	ldr	r3, [pc, #312]	; (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe faa2 	bl	800121c <HAL_InitTick>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d052      	beq.n	8002d88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	e364      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d032      	beq.n	8002d54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cee:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a42      	ldr	r2, [pc, #264]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fadf 	bl	80012bc <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d02:	f7fe fadb 	bl	80012bc <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e34d      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d14:	4b39      	ldr	r3, [pc, #228]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d20:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a35      	ldr	r2, [pc, #212]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d26:	f043 0308 	orr.w	r3, r3, #8
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b33      	ldr	r3, [pc, #204]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4930      	ldr	r1, [pc, #192]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d3e:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	492b      	ldr	r1, [pc, #172]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
 8002d52:	e01a      	b.n	8002d8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d54:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a28      	ldr	r2, [pc, #160]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d60:	f7fe faac 	bl	80012bc <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d68:	f7fe faa8 	bl	80012bc <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e31a      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1dc>
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d073      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_OscConfig+0x21c>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d10e      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d10b      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d063      	beq.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d15f      	bne.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e2f7      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc8:	d106      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a0b      	ldr	r2, [pc, #44]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e025      	b.n	8002e24 <HAL_RCC_OscConfig+0x298>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de0:	d114      	bne.n	8002e0c <HAL_RCC_OscConfig+0x280>
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a02      	ldr	r2, [pc, #8]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e013      	b.n	8002e24 <HAL_RCC_OscConfig+0x298>
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08006124 	.word	0x08006124
 8002e04:	20000014 	.word	0x20000014
 8002e08:	20000018 	.word	0x20000018
 8002e0c:	4ba0      	ldr	r3, [pc, #640]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a9f      	ldr	r2, [pc, #636]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b9d      	ldr	r3, [pc, #628]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a9c      	ldr	r2, [pc, #624]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fa46 	bl	80012bc <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe fa42 	bl	80012bc <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e2b4      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e46:	4b92      	ldr	r3, [pc, #584]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x2a8>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fa32 	bl	80012bc <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fe fa2e 	bl	80012bc <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e2a0      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e6e:	4b88      	ldr	r3, [pc, #544]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2d0>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d060      	beq.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_OscConfig+0x310>
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d119      	bne.n	8002eca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d116      	bne.n	8002eca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e9c:	4b7c      	ldr	r3, [pc, #496]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x328>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e27d      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b76      	ldr	r3, [pc, #472]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	4973      	ldr	r1, [pc, #460]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec8:	e040      	b.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d023      	beq.n	8002f1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed2:	4b6f      	ldr	r3, [pc, #444]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a6e      	ldr	r2, [pc, #440]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe f9ed 	bl	80012bc <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fe f9e9 	bl	80012bc <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e25b      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef8:	4b65      	ldr	r3, [pc, #404]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b62      	ldr	r3, [pc, #392]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	495f      	ldr	r1, [pc, #380]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
 8002f18:	e018      	b.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b5d      	ldr	r3, [pc, #372]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a5c      	ldr	r2, [pc, #368]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7fe f9c9 	bl	80012bc <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7fe f9c5 	bl	80012bc <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e237      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d03c      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f60:	4b4b      	ldr	r3, [pc, #300]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f66:	4a4a      	ldr	r2, [pc, #296]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe f9a4 	bl	80012bc <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe f9a0 	bl	80012bc <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e212      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f8a:	4b41      	ldr	r3, [pc, #260]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCC_OscConfig+0x3ec>
 8002f98:	e01b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa0:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fe f987 	bl	80012bc <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb2:	f7fe f983 	bl	80012bc <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1f5      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc4:	4b32      	ldr	r3, [pc, #200]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1ef      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80a6 	beq.w	800312c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fe4:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10d      	bne.n	800300c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff0:	4b27      	ldr	r3, [pc, #156]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	4a26      	ldr	r2, [pc, #152]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8002ffc:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003008:	2301      	movs	r3, #1
 800300a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300c:	4b21      	ldr	r3, [pc, #132]	; (8003094 <HAL_RCC_OscConfig+0x508>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d118      	bne.n	800304a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_OscConfig+0x508>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <HAL_RCC_OscConfig+0x508>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003024:	f7fe f94a 	bl	80012bc <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302c:	f7fe f946 	bl	80012bc <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e1b8      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_RCC_OscConfig+0x508>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d108      	bne.n	8003064 <HAL_RCC_OscConfig+0x4d8>
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	4a0d      	ldr	r2, [pc, #52]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003062:	e029      	b.n	80030b8 <HAL_RCC_OscConfig+0x52c>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b05      	cmp	r3, #5
 800306a:	d115      	bne.n	8003098 <HAL_RCC_OscConfig+0x50c>
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	4a07      	ldr	r2, [pc, #28]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8003074:	f043 0304 	orr.w	r3, r3, #4
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	4a03      	ldr	r2, [pc, #12]	; (8003090 <HAL_RCC_OscConfig+0x504>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800308c:	e014      	b.n	80030b8 <HAL_RCC_OscConfig+0x52c>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	40007000 	.word	0x40007000
 8003098:	4b9d      	ldr	r3, [pc, #628]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	4a9c      	ldr	r2, [pc, #624]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a8:	4b99      	ldr	r3, [pc, #612]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	4a98      	ldr	r2, [pc, #608]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 80030b0:	f023 0304 	bic.w	r3, r3, #4
 80030b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d016      	beq.n	80030ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fe f8fc 	bl	80012bc <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fe f8f8 	bl	80012bc <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e168      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030de:	4b8c      	ldr	r3, [pc, #560]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ed      	beq.n	80030c8 <HAL_RCC_OscConfig+0x53c>
 80030ec:	e015      	b.n	800311a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe f8e5 	bl	80012bc <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f6:	f7fe f8e1 	bl	80012bc <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e151      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800310c:	4b80      	ldr	r3, [pc, #512]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1ed      	bne.n	80030f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311a:	7ffb      	ldrb	r3, [r7, #31]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d105      	bne.n	800312c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003120:	4b7b      	ldr	r3, [pc, #492]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	4a7a      	ldr	r2, [pc, #488]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 8003126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d03c      	beq.n	80031b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01c      	beq.n	800317a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003140:	4b73      	ldr	r3, [pc, #460]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 8003142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003146:	4a72      	ldr	r2, [pc, #456]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe f8b4 	bl	80012bc <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003158:	f7fe f8b0 	bl	80012bc <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e122      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800316a:	4b69      	ldr	r3, [pc, #420]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 800316c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ef      	beq.n	8003158 <HAL_RCC_OscConfig+0x5cc>
 8003178:	e01b      	b.n	80031b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800317a:	4b65      	ldr	r3, [pc, #404]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 800317c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003180:	4a63      	ldr	r2, [pc, #396]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7fe f897 	bl	80012bc <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003192:	f7fe f893 	bl	80012bc <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e105      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031a4:	4b5a      	ldr	r3, [pc, #360]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 80031a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1ef      	bne.n	8003192 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80f9 	beq.w	80033ae <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	f040 80cf 	bne.w	8003364 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031c6:	4b52      	ldr	r3, [pc, #328]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f003 0203 	and.w	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d12c      	bne.n	8003234 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	3b01      	subs	r3, #1
 80031e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d123      	bne.n	8003234 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d11b      	bne.n	8003234 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d113      	bne.n	8003234 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d109      	bne.n	8003234 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	3b01      	subs	r3, #1
 800322e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d071      	beq.n	8003318 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d068      	beq.n	800330c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800323a:	4b35      	ldr	r3, [pc, #212]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d105      	bne.n	8003252 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003246:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0ac      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003256:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 800325c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003260:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003262:	f7fe f82b 	bl	80012bc <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe f827 	bl	80012bc <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e099      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327c:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_RCC_OscConfig+0x788>)
 800328e:	4013      	ands	r3, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003298:	3a01      	subs	r2, #1
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	4311      	orrs	r1, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032a2:	0212      	lsls	r2, r2, #8
 80032a4:	4311      	orrs	r1, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032aa:	0852      	lsrs	r2, r2, #1
 80032ac:	3a01      	subs	r2, #1
 80032ae:	0552      	lsls	r2, r2, #21
 80032b0:	4311      	orrs	r1, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032b6:	0852      	lsrs	r2, r2, #1
 80032b8:	3a01      	subs	r2, #1
 80032ba:	0652      	lsls	r2, r2, #25
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032c2:	06d2      	lsls	r2, r2, #27
 80032c4:	430a      	orrs	r2, r1
 80032c6:	4912      	ldr	r1, [pc, #72]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0f      	ldr	r2, [pc, #60]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 80032d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 80032de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032e4:	f7fd ffea 	bl	80012bc <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fd ffe6 	bl	80012bc <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e058      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fe:	4b04      	ldr	r3, [pc, #16]	; (8003310 <HAL_RCC_OscConfig+0x784>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800330a:	e050      	b.n	80033ae <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e04f      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
 8003310:	40021000 	.word	0x40021000
 8003314:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003318:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <HAL_RCC_OscConfig+0x82c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d144      	bne.n	80033ae <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003324:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RCC_OscConfig+0x82c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a23      	ldr	r2, [pc, #140]	; (80033b8 <HAL_RCC_OscConfig+0x82c>)
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003330:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <HAL_RCC_OscConfig+0x82c>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <HAL_RCC_OscConfig+0x82c>)
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800333c:	f7fd ffbe 	bl	80012bc <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7fd ffba 	bl	80012bc <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e02c      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003356:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <HAL_RCC_OscConfig+0x82c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x7b8>
 8003362:	e024      	b.n	80033ae <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d01f      	beq.n	80033aa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336a:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <HAL_RCC_OscConfig+0x82c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <HAL_RCC_OscConfig+0x82c>)
 8003370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003376:	f7fd ffa1 	bl	80012bc <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337e:	f7fd ff9d 	bl	80012bc <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e00f      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003390:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_RCC_OscConfig+0x82c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f0      	bne.n	800337e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_RCC_OscConfig+0x82c>)
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	4905      	ldr	r1, [pc, #20]	; (80033b8 <HAL_RCC_OscConfig+0x82c>)
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCC_OscConfig+0x830>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	60cb      	str	r3, [r1, #12]
 80033a8:	e001      	b.n	80033ae <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	feeefffc 	.word	0xfeeefffc

080033c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e11d      	b.n	8003614 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d8:	4b90      	ldr	r3, [pc, #576]	; (800361c <HAL_RCC_ClockConfig+0x25c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d910      	bls.n	8003408 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b8d      	ldr	r3, [pc, #564]	; (800361c <HAL_RCC_ClockConfig+0x25c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 020f 	bic.w	r2, r3, #15
 80033ee:	498b      	ldr	r1, [pc, #556]	; (800361c <HAL_RCC_ClockConfig+0x25c>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b89      	ldr	r3, [pc, #548]	; (800361c <HAL_RCC_ClockConfig+0x25c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e105      	b.n	8003614 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d010      	beq.n	8003436 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	4b81      	ldr	r3, [pc, #516]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003420:	429a      	cmp	r2, r3
 8003422:	d908      	bls.n	8003436 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003424:	4b7e      	ldr	r3, [pc, #504]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	497b      	ldr	r1, [pc, #492]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d079      	beq.n	8003536 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d11e      	bne.n	8003488 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344a:	4b75      	ldr	r3, [pc, #468]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0dc      	b.n	8003614 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800345a:	f000 fa09 	bl	8003870 <RCC_GetSysClockFreqFromPLLSource>
 800345e:	4603      	mov	r3, r0
 8003460:	4a70      	ldr	r2, [pc, #448]	; (8003624 <HAL_RCC_ClockConfig+0x264>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d946      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003466:	4b6e      	ldr	r3, [pc, #440]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d140      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003472:	4b6b      	ldr	r3, [pc, #428]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800347a:	4a69      	ldr	r2, [pc, #420]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 800347c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003480:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e035      	b.n	80034f4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d107      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003490:	4b63      	ldr	r3, [pc, #396]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d115      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0b9      	b.n	8003614 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a8:	4b5d      	ldr	r3, [pc, #372]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0ad      	b.n	8003614 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b8:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0a5      	b.n	8003614 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80034c8:	f000 f8b4 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4a55      	ldr	r2, [pc, #340]	; (8003624 <HAL_RCC_ClockConfig+0x264>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d90f      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80034d4:	4b52      	ldr	r3, [pc, #328]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034e0:	4b4f      	ldr	r3, [pc, #316]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034e8:	4a4d      	ldr	r2, [pc, #308]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 80034ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034f4:	4b4a      	ldr	r3, [pc, #296]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f023 0203 	bic.w	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4947      	ldr	r1, [pc, #284]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003506:	f7fd fed9 	bl	80012bc <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350c:	e00a      	b.n	8003524 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350e:	f7fd fed5 	bl	80012bc <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e077      	b.n	8003614 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003524:	4b3e      	ldr	r3, [pc, #248]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 020c 	and.w	r2, r3, #12
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	429a      	cmp	r2, r3
 8003534:	d1eb      	bne.n	800350e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b80      	cmp	r3, #128	; 0x80
 800353a:	d105      	bne.n	8003548 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800353c:	4b38      	ldr	r3, [pc, #224]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a37      	ldr	r2, [pc, #220]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 8003542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003546:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d010      	beq.n	8003576 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003560:	429a      	cmp	r2, r3
 8003562:	d208      	bcs.n	8003576 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003564:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	492b      	ldr	r1, [pc, #172]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003576:	4b29      	ldr	r3, [pc, #164]	; (800361c <HAL_RCC_ClockConfig+0x25c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d210      	bcs.n	80035a6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003584:	4b25      	ldr	r3, [pc, #148]	; (800361c <HAL_RCC_ClockConfig+0x25c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 020f 	bic.w	r2, r3, #15
 800358c:	4923      	ldr	r1, [pc, #140]	; (800361c <HAL_RCC_ClockConfig+0x25c>)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003594:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_RCC_ClockConfig+0x25c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d001      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e036      	b.n	8003614 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b2:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	4918      	ldr	r1, [pc, #96]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035d0:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4910      	ldr	r1, [pc, #64]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035e4:	f000 f826 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <HAL_RCC_ClockConfig+0x260>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	091b      	lsrs	r3, r3, #4
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	490c      	ldr	r1, [pc, #48]	; (8003628 <HAL_RCC_ClockConfig+0x268>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003600:	4a0a      	ldr	r2, [pc, #40]	; (800362c <HAL_RCC_ClockConfig+0x26c>)
 8003602:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <HAL_RCC_ClockConfig+0x270>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7fd fe07 	bl	800121c <HAL_InitTick>
 800360e:	4603      	mov	r3, r0
 8003610:	73fb      	strb	r3, [r7, #15]

  return status;
 8003612:	7bfb      	ldrb	r3, [r7, #15]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40022000 	.word	0x40022000
 8003620:	40021000 	.word	0x40021000
 8003624:	04c4b400 	.word	0x04c4b400
 8003628:	08006124 	.word	0x08006124
 800362c:	20000014 	.word	0x20000014
 8003630:	20000018 	.word	0x20000018

08003634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	; 0x24
 8003638:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003642:	4b3e      	ldr	r3, [pc, #248]	; (800373c <HAL_RCC_GetSysClockFreq+0x108>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800364c:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_GetSysClockFreq+0x108>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x34>
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d121      	bne.n	80036a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d11e      	bne.n	80036a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003668:	4b34      	ldr	r3, [pc, #208]	; (800373c <HAL_RCC_GetSysClockFreq+0x108>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003674:	4b31      	ldr	r3, [pc, #196]	; (800373c <HAL_RCC_GetSysClockFreq+0x108>)
 8003676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	e005      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003684:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_RCC_GetSysClockFreq+0x108>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003690:	4a2b      	ldr	r2, [pc, #172]	; (8003740 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003698:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10d      	bne.n	80036bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036a4:	e00a      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d102      	bne.n	80036b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <HAL_RCC_GetSysClockFreq+0x110>)
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	e004      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036b8:	4b23      	ldr	r3, [pc, #140]	; (8003748 <HAL_RCC_GetSysClockFreq+0x114>)
 80036ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	d134      	bne.n	800372c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036c2:	4b1e      	ldr	r3, [pc, #120]	; (800373c <HAL_RCC_GetSysClockFreq+0x108>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d003      	beq.n	80036da <HAL_RCC_GetSysClockFreq+0xa6>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d003      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0xac>
 80036d8:	e005      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036da:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <HAL_RCC_GetSysClockFreq+0x110>)
 80036dc:	617b      	str	r3, [r7, #20]
      break;
 80036de:	e005      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_RCC_GetSysClockFreq+0x114>)
 80036e2:	617b      	str	r3, [r7, #20]
      break;
 80036e4:	e002      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	617b      	str	r3, [r7, #20]
      break;
 80036ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <HAL_RCC_GetSysClockFreq+0x108>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	3301      	adds	r3, #1
 80036f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_RCC_GetSysClockFreq+0x108>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	fb03 f202 	mul.w	r2, r3, r2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_RCC_GetSysClockFreq+0x108>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	0e5b      	lsrs	r3, r3, #25
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	3301      	adds	r3, #1
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	fbb2 f3f3 	udiv	r3, r2, r3
 800372a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800372c:	69bb      	ldr	r3, [r7, #24]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3724      	adds	r7, #36	; 0x24
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	0800613c 	.word	0x0800613c
 8003744:	00f42400 	.word	0x00f42400
 8003748:	007a1200 	.word	0x007a1200

0800374c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_RCC_GetHCLKFreq+0x14>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000014 	.word	0x20000014

08003764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003768:	f7ff fff0 	bl	800374c <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4904      	ldr	r1, [pc, #16]	; (800378c <HAL_RCC_GetPCLK1Freq+0x28>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000
 800378c:	08006134 	.word	0x08006134

08003790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003794:	f7ff ffda 	bl	800374c <HAL_RCC_GetHCLKFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	0adb      	lsrs	r3, r3, #11
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	4904      	ldr	r1, [pc, #16]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037a6:	5ccb      	ldrb	r3, [r1, r3]
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000
 80037b8:	08006134 	.word	0x08006134

080037bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037c8:	4b27      	ldr	r3, [pc, #156]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037d4:	f7ff f906 	bl	80029e4 <HAL_PWREx_GetVoltageRange>
 80037d8:	6178      	str	r0, [r7, #20]
 80037da:	e014      	b.n	8003806 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037dc:	4b22      	ldr	r3, [pc, #136]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	4a21      	ldr	r2, [pc, #132]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e6:	6593      	str	r3, [r2, #88]	; 0x58
 80037e8:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037f4:	f7ff f8f6 	bl	80029e4 <HAL_PWREx_GetVoltageRange>
 80037f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003804:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380c:	d10b      	bne.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b80      	cmp	r3, #128	; 0x80
 8003812:	d913      	bls.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2ba0      	cmp	r3, #160	; 0xa0
 8003818:	d902      	bls.n	8003820 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800381a:	2302      	movs	r3, #2
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	e00d      	b.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003820:	2301      	movs	r3, #1
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	e00a      	b.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b7f      	cmp	r3, #127	; 0x7f
 800382a:	d902      	bls.n	8003832 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800382c:	2302      	movs	r3, #2
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	e004      	b.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b70      	cmp	r3, #112	; 0x70
 8003836:	d101      	bne.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003838:	2301      	movs	r3, #1
 800383a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 020f 	bic.w	r2, r3, #15
 8003844:	4909      	ldr	r1, [pc, #36]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800384c:	4b07      	ldr	r3, [pc, #28]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40021000 	.word	0x40021000
 800386c:	40022000 	.word	0x40022000

08003870 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003876:	4b2d      	ldr	r3, [pc, #180]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d00b      	beq.n	800389e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b03      	cmp	r3, #3
 800388a:	d825      	bhi.n	80038d8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d008      	beq.n	80038a4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d11f      	bne.n	80038d8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800389a:	613b      	str	r3, [r7, #16]
    break;
 800389c:	e01f      	b.n	80038de <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800389e:	4b25      	ldr	r3, [pc, #148]	; (8003934 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80038a0:	613b      	str	r3, [r7, #16]
    break;
 80038a2:	e01c      	b.n	80038de <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038a4:	4b21      	ldr	r3, [pc, #132]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038b0:	4b1e      	ldr	r3, [pc, #120]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	e005      	b.n	80038cc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80038cc:	4a1a      	ldr	r2, [pc, #104]	; (8003938 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	613b      	str	r3, [r7, #16]
    break;
 80038d6:	e002      	b.n	80038de <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
    break;
 80038dc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	3301      	adds	r3, #1
 80038ea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038ec:	4b0f      	ldr	r3, [pc, #60]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	fb03 f202 	mul.w	r2, r3, r2
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	0e5b      	lsrs	r3, r3, #25
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	3301      	adds	r3, #1
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800391e:	683b      	ldr	r3, [r7, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40021000 	.word	0x40021000
 8003930:	00f42400 	.word	0x00f42400
 8003934:	007a1200 	.word	0x007a1200
 8003938:	0800613c 	.word	0x0800613c

0800393c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003944:	2300      	movs	r3, #0
 8003946:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003948:	2300      	movs	r3, #0
 800394a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003954:	2b00      	cmp	r3, #0
 8003956:	d040      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d02a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003960:	2b80      	cmp	r3, #128	; 0x80
 8003962:	d825      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003964:	2b60      	cmp	r3, #96	; 0x60
 8003966:	d026      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003968:	2b60      	cmp	r3, #96	; 0x60
 800396a:	d821      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d006      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003970:	2b40      	cmp	r3, #64	; 0x40
 8003972:	d81d      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003978:	2b20      	cmp	r3, #32
 800397a:	d010      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800397c:	e018      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800397e:	4b89      	ldr	r3, [pc, #548]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	4a88      	ldr	r2, [pc, #544]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800398a:	e015      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fb02 	bl	8003f9c <RCCEx_PLLSAI1_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800399c:	e00c      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3320      	adds	r3, #32
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fbed 	bl	8004184 <RCCEx_PLLSAI2_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ae:	e003      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	74fb      	strb	r3, [r7, #19]
      break;
 80039b4:	e000      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80039b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039be:	4b79      	ldr	r3, [pc, #484]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039cc:	4975      	ldr	r1, [pc, #468]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80039d4:	e001      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d6:	7cfb      	ldrb	r3, [r7, #19]
 80039d8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d047      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ee:	d030      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f4:	d82a      	bhi.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039fa:	d02a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a00:	d824      	bhi.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a06:	d008      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0c:	d81e      	bhi.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a16:	d010      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a18:	e018      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a1a:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	4a61      	ldr	r2, [pc, #388]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a26:	e015      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fab4 	bl	8003f9c <RCCEx_PLLSAI1_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a38:	e00c      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3320      	adds	r3, #32
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fb9f 	bl	8004184 <RCCEx_PLLSAI2_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a4a:	e003      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	74fb      	strb	r3, [r7, #19]
      break;
 8003a50:	e000      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a5a:	4b52      	ldr	r3, [pc, #328]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	494e      	ldr	r1, [pc, #312]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a70:	e001      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a72:	7cfb      	ldrb	r3, [r7, #19]
 8003a74:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 809f 	beq.w	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a84:	2300      	movs	r3, #0
 8003a86:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a88:	4b46      	ldr	r3, [pc, #280]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00d      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9e:	4b41      	ldr	r3, [pc, #260]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	4a40      	ldr	r2, [pc, #256]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aaa:	4b3e      	ldr	r3, [pc, #248]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a3a      	ldr	r2, [pc, #232]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac6:	f7fd fbf9 	bl	80012bc <HAL_GetTick>
 8003aca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003acc:	e009      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ace:	f7fd fbf5 	bl	80012bc <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d902      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	74fb      	strb	r3, [r7, #19]
        break;
 8003ae0:	e005      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ae2:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0ef      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d15b      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003af4:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01f      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d019      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b12:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b1e:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	4a1f      	ldr	r2, [pc, #124]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b3e:	4a19      	ldr	r2, [pc, #100]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d016      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fbb4 	bl	80012bc <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b56:	e00b      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7fd fbb0 	bl	80012bc <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d902      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	74fb      	strb	r3, [r7, #19]
            break;
 8003b6e:	e006      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ec      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003b7e:	7cfb      	ldrb	r3, [r7, #19]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b84:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	4903      	ldr	r1, [pc, #12]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ba0:	74bb      	strb	r3, [r7, #18]
 8003ba2:	e005      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bb0:	7c7b      	ldrb	r3, [r7, #17]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d105      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb6:	4ba0      	ldr	r3, [pc, #640]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	4a9f      	ldr	r2, [pc, #636]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bce:	4b9a      	ldr	r3, [pc, #616]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f023 0203 	bic.w	r2, r3, #3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	4996      	ldr	r1, [pc, #600]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bf0:	4b91      	ldr	r3, [pc, #580]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	f023 020c 	bic.w	r2, r3, #12
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	498e      	ldr	r1, [pc, #568]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c12:	4b89      	ldr	r3, [pc, #548]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	4985      	ldr	r1, [pc, #532]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c34:	4b80      	ldr	r3, [pc, #512]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c42:	497d      	ldr	r1, [pc, #500]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c56:	4b78      	ldr	r3, [pc, #480]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c64:	4974      	ldr	r1, [pc, #464]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c78:	4b6f      	ldr	r3, [pc, #444]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c86:	496c      	ldr	r1, [pc, #432]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c9a:	4b67      	ldr	r3, [pc, #412]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca8:	4963      	ldr	r1, [pc, #396]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cbc:	4b5e      	ldr	r3, [pc, #376]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cca:	495b      	ldr	r1, [pc, #364]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cde:	4b56      	ldr	r3, [pc, #344]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	4952      	ldr	r1, [pc, #328]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d00:	4b4d      	ldr	r3, [pc, #308]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	494a      	ldr	r1, [pc, #296]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d22:	4b45      	ldr	r3, [pc, #276]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	4941      	ldr	r1, [pc, #260]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d44:	4b3c      	ldr	r3, [pc, #240]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d52:	4939      	ldr	r1, [pc, #228]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d028      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d66:	4b34      	ldr	r3, [pc, #208]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d74:	4930      	ldr	r1, [pc, #192]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d84:	d106      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d86:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	4a2b      	ldr	r2, [pc, #172]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d90:	60d3      	str	r3, [r2, #12]
 8003d92:	e011      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3304      	adds	r3, #4
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 f8f9 	bl	8003f9c <RCCEx_PLLSAI1_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dae:	7cfb      	ldrb	r3, [r7, #19]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d04d      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dcc:	d108      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003dce:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dd4:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dda:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003dde:	e012      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003de0:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de6:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003df0:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dfe:	490e      	ldr	r1, [pc, #56]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e10:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e1a:	60d3      	str	r3, [r2, #12]
 8003e1c:	e020      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e26:	d109      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a02      	ldr	r2, [pc, #8]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e32:	60d3      	str	r3, [r2, #12]
 8003e34:	e014      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f8a5 	bl	8003f9c <RCCEx_PLLSAI1_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d028      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e6c:	4b4a      	ldr	r3, [pc, #296]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e7a:	4947      	ldr	r1, [pc, #284]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8c:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a41      	ldr	r2, [pc, #260]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e96:	60d3      	str	r3, [r2, #12]
 8003e98:	e011      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ea2:	d10c      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f876 	bl	8003f9c <RCCEx_PLLSAI1_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003eba:	7cfb      	ldrb	r3, [r7, #19]
 8003ebc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01e      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eca:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eda:	492f      	ldr	r1, [pc, #188]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f851 	bl	8003f9c <RCCEx_PLLSAI1_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003efe:	7cfb      	ldrb	r3, [r7, #19]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f14:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f1a:	f023 0204 	bic.w	r2, r3, #4
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f24:	491c      	ldr	r1, [pc, #112]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f38:	4b17      	ldr	r3, [pc, #92]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f3e:	f023 0218 	bic.w	r2, r3, #24
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	4913      	ldr	r1, [pc, #76]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d017      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6c:	490a      	ldr	r1, [pc, #40]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f7e:	d105      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000

08003f9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003faa:	4b72      	ldr	r3, [pc, #456]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00e      	beq.n	8003fd4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fb6:	4b6f      	ldr	r3, [pc, #444]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0203 	and.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d103      	bne.n	8003fce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d142      	bne.n	8004054 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
 8003fd2:	e03f      	b.n	8004054 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d018      	beq.n	800400e <RCCEx_PLLSAI1_Config+0x72>
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d825      	bhi.n	800402c <RCCEx_PLLSAI1_Config+0x90>
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d002      	beq.n	8003fea <RCCEx_PLLSAI1_Config+0x4e>
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d009      	beq.n	8003ffc <RCCEx_PLLSAI1_Config+0x60>
 8003fe8:	e020      	b.n	800402c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fea:	4b62      	ldr	r3, [pc, #392]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d11d      	bne.n	8004032 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ffa:	e01a      	b.n	8004032 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ffc:	4b5d      	ldr	r3, [pc, #372]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d116      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800400c:	e013      	b.n	8004036 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800400e:	4b59      	ldr	r3, [pc, #356]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800401a:	4b56      	ldr	r3, [pc, #344]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800402a:	e006      	b.n	800403a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	e004      	b.n	800403c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004032:	bf00      	nop
 8004034:	e002      	b.n	800403c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004036:	bf00      	nop
 8004038:	e000      	b.n	800403c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800403a:	bf00      	nop
    }

    if(status == HAL_OK)
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d108      	bne.n	8004054 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004042:	4b4c      	ldr	r3, [pc, #304]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f023 0203 	bic.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4949      	ldr	r1, [pc, #292]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004050:	4313      	orrs	r3, r2
 8004052:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f040 8086 	bne.w	8004168 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800405c:	4b45      	ldr	r3, [pc, #276]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a44      	ldr	r2, [pc, #272]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004062:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004068:	f7fd f928 	bl	80012bc <HAL_GetTick>
 800406c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800406e:	e009      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004070:	f7fd f924 	bl	80012bc <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d902      	bls.n	8004084 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	73fb      	strb	r3, [r7, #15]
        break;
 8004082:	e005      	b.n	8004090 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004084:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ef      	bne.n	8004070 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d168      	bne.n	8004168 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d113      	bne.n	80040c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800409c:	4b35      	ldr	r3, [pc, #212]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	4b35      	ldr	r3, [pc, #212]	; (8004178 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6892      	ldr	r2, [r2, #8]
 80040a8:	0211      	lsls	r1, r2, #8
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68d2      	ldr	r2, [r2, #12]
 80040ae:	06d2      	lsls	r2, r2, #27
 80040b0:	4311      	orrs	r1, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6852      	ldr	r2, [r2, #4]
 80040b6:	3a01      	subs	r2, #1
 80040b8:	0112      	lsls	r2, r2, #4
 80040ba:	430a      	orrs	r2, r1
 80040bc:	492d      	ldr	r1, [pc, #180]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]
 80040c2:	e02d      	b.n	8004120 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d115      	bne.n	80040f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ca:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	4b2b      	ldr	r3, [pc, #172]	; (800417c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6892      	ldr	r2, [r2, #8]
 80040d6:	0211      	lsls	r1, r2, #8
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6912      	ldr	r2, [r2, #16]
 80040dc:	0852      	lsrs	r2, r2, #1
 80040de:	3a01      	subs	r2, #1
 80040e0:	0552      	lsls	r2, r2, #21
 80040e2:	4311      	orrs	r1, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6852      	ldr	r2, [r2, #4]
 80040e8:	3a01      	subs	r2, #1
 80040ea:	0112      	lsls	r2, r2, #4
 80040ec:	430a      	orrs	r2, r1
 80040ee:	4921      	ldr	r1, [pc, #132]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	610b      	str	r3, [r1, #16]
 80040f4:	e014      	b.n	8004120 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040f6:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6892      	ldr	r2, [r2, #8]
 8004102:	0211      	lsls	r1, r2, #8
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6952      	ldr	r2, [r2, #20]
 8004108:	0852      	lsrs	r2, r2, #1
 800410a:	3a01      	subs	r2, #1
 800410c:	0652      	lsls	r2, r2, #25
 800410e:	4311      	orrs	r1, r2
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6852      	ldr	r2, [r2, #4]
 8004114:	3a01      	subs	r2, #1
 8004116:	0112      	lsls	r2, r2, #4
 8004118:	430a      	orrs	r2, r1
 800411a:	4916      	ldr	r1, [pc, #88]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 800411c:	4313      	orrs	r3, r2
 800411e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a13      	ldr	r2, [pc, #76]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800412a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fd f8c6 	bl	80012bc <HAL_GetTick>
 8004130:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004132:	e009      	b.n	8004148 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004134:	f7fd f8c2 	bl	80012bc <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d902      	bls.n	8004148 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	73fb      	strb	r3, [r7, #15]
          break;
 8004146:	e005      	b.n	8004154 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ef      	beq.n	8004134 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	4904      	ldr	r1, [pc, #16]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004164:	4313      	orrs	r3, r2
 8004166:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	07ff800f 	.word	0x07ff800f
 800417c:	ff9f800f 	.word	0xff9f800f
 8004180:	f9ff800f 	.word	0xf9ff800f

08004184 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004192:	4b72      	ldr	r3, [pc, #456]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800419e:	4b6f      	ldr	r3, [pc, #444]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f003 0203 	and.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d103      	bne.n	80041b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
       ||
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d142      	bne.n	800423c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
 80041ba:	e03f      	b.n	800423c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d018      	beq.n	80041f6 <RCCEx_PLLSAI2_Config+0x72>
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d825      	bhi.n	8004214 <RCCEx_PLLSAI2_Config+0x90>
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d002      	beq.n	80041d2 <RCCEx_PLLSAI2_Config+0x4e>
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d009      	beq.n	80041e4 <RCCEx_PLLSAI2_Config+0x60>
 80041d0:	e020      	b.n	8004214 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041d2:	4b62      	ldr	r3, [pc, #392]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11d      	bne.n	800421a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e2:	e01a      	b.n	800421a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041e4:	4b5d      	ldr	r3, [pc, #372]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d116      	bne.n	800421e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f4:	e013      	b.n	800421e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041f6:	4b59      	ldr	r3, [pc, #356]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004202:	4b56      	ldr	r3, [pc, #344]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004212:	e006      	b.n	8004222 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      break;
 8004218:	e004      	b.n	8004224 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800421a:	bf00      	nop
 800421c:	e002      	b.n	8004224 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004222:	bf00      	nop
    }

    if(status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800422a:	4b4c      	ldr	r3, [pc, #304]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 0203 	bic.w	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4949      	ldr	r1, [pc, #292]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004238:	4313      	orrs	r3, r2
 800423a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f040 8086 	bne.w	8004350 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004244:	4b45      	ldr	r3, [pc, #276]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a44      	ldr	r2, [pc, #272]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004250:	f7fd f834 	bl	80012bc <HAL_GetTick>
 8004254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004256:	e009      	b.n	800426c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004258:	f7fd f830 	bl	80012bc <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d902      	bls.n	800426c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	73fb      	strb	r3, [r7, #15]
        break;
 800426a:	e005      	b.n	8004278 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800426c:	4b3b      	ldr	r3, [pc, #236]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ef      	bne.n	8004258 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d168      	bne.n	8004350 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d113      	bne.n	80042ac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	4b35      	ldr	r3, [pc, #212]	; (8004360 <RCCEx_PLLSAI2_Config+0x1dc>)
 800428a:	4013      	ands	r3, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6892      	ldr	r2, [r2, #8]
 8004290:	0211      	lsls	r1, r2, #8
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68d2      	ldr	r2, [r2, #12]
 8004296:	06d2      	lsls	r2, r2, #27
 8004298:	4311      	orrs	r1, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6852      	ldr	r2, [r2, #4]
 800429e:	3a01      	subs	r2, #1
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	430a      	orrs	r2, r1
 80042a4:	492d      	ldr	r1, [pc, #180]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	614b      	str	r3, [r1, #20]
 80042aa:	e02d      	b.n	8004308 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d115      	bne.n	80042de <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <RCCEx_PLLSAI2_Config+0x1e0>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6892      	ldr	r2, [r2, #8]
 80042be:	0211      	lsls	r1, r2, #8
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6912      	ldr	r2, [r2, #16]
 80042c4:	0852      	lsrs	r2, r2, #1
 80042c6:	3a01      	subs	r2, #1
 80042c8:	0552      	lsls	r2, r2, #21
 80042ca:	4311      	orrs	r1, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6852      	ldr	r2, [r2, #4]
 80042d0:	3a01      	subs	r2, #1
 80042d2:	0112      	lsls	r2, r2, #4
 80042d4:	430a      	orrs	r2, r1
 80042d6:	4921      	ldr	r1, [pc, #132]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	614b      	str	r3, [r1, #20]
 80042dc:	e014      	b.n	8004308 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042de:	4b1f      	ldr	r3, [pc, #124]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042e0:	695a      	ldr	r2, [r3, #20]
 80042e2:	4b21      	ldr	r3, [pc, #132]	; (8004368 <RCCEx_PLLSAI2_Config+0x1e4>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6892      	ldr	r2, [r2, #8]
 80042ea:	0211      	lsls	r1, r2, #8
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6952      	ldr	r2, [r2, #20]
 80042f0:	0852      	lsrs	r2, r2, #1
 80042f2:	3a01      	subs	r2, #1
 80042f4:	0652      	lsls	r2, r2, #25
 80042f6:	4311      	orrs	r1, r2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6852      	ldr	r2, [r2, #4]
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0112      	lsls	r2, r2, #4
 8004300:	430a      	orrs	r2, r1
 8004302:	4916      	ldr	r1, [pc, #88]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a13      	ldr	r2, [pc, #76]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 800430e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004312:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fc ffd2 	bl	80012bc <HAL_GetTick>
 8004318:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800431a:	e009      	b.n	8004330 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800431c:	f7fc ffce 	bl	80012bc <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d902      	bls.n	8004330 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	73fb      	strb	r3, [r7, #15]
          break;
 800432e:	e005      	b.n	800433c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ef      	beq.n	800431c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	4904      	ldr	r1, [pc, #16]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004350:	7bfb      	ldrb	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000
 8004360:	07ff800f 	.word	0x07ff800f
 8004364:	ff9f800f 	.word	0xff9f800f
 8004368:	f9ff800f 	.word	0xf9ff800f

0800436c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e049      	b.n	8004412 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc fe5e 	bl	8001054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f000 fa1c 	bl	80047e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d001      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e04f      	b.n	80044d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a23      	ldr	r2, [pc, #140]	; (80044e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d01d      	beq.n	8004492 <HAL_TIM_Base_Start_IT+0x76>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d018      	beq.n	8004492 <HAL_TIM_Base_Start_IT+0x76>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_TIM_Base_Start_IT+0x76>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_TIM_Base_Start_IT+0x76>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <HAL_TIM_Base_Start_IT+0xd0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_TIM_Base_Start_IT+0x76>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_TIM_Base_Start_IT+0x76>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d115      	bne.n	80044be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800449a:	4013      	ands	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b06      	cmp	r3, #6
 80044a2:	d015      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0xb4>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044aa:	d011      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044bc:	e008      	b.n	80044d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	e000      	b.n	80044d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800
 80044ec:	40000c00 	.word	0x40000c00
 80044f0:	40013400 	.word	0x40013400
 80044f4:	40014000 	.word	0x40014000
 80044f8:	00010007 	.word	0x00010007

080044fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a1a      	ldr	r2, [r3, #32]
 800451a:	f241 1311 	movw	r3, #4369	; 0x1111
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10f      	bne.n	8004544 <HAL_TIM_Base_Stop_IT+0x48>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6a1a      	ldr	r2, [r3, #32]
 800452a:	f240 4344 	movw	r3, #1092	; 0x444
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d107      	bne.n	8004544 <HAL_TIM_Base_Stop_IT+0x48>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b02      	cmp	r3, #2
 800456e:	d122      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d11b      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f06f 0202 	mvn.w	r2, #2
 8004586:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f905 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 80045a2:	e005      	b.n	80045b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f8f7 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f908 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d122      	bne.n	800460a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d11b      	bne.n	800460a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0204 	mvn.w	r2, #4
 80045da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f8db 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 80045f6:	e005      	b.n	8004604 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f8cd 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8de 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b08      	cmp	r3, #8
 8004616:	d122      	bne.n	800465e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b08      	cmp	r3, #8
 8004624:	d11b      	bne.n	800465e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f06f 0208 	mvn.w	r2, #8
 800462e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2204      	movs	r2, #4
 8004634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8b1 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 800464a:	e005      	b.n	8004658 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f8a3 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8b4 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b10      	cmp	r3, #16
 800466a:	d122      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b10      	cmp	r3, #16
 8004678:	d11b      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f06f 0210 	mvn.w	r2, #16
 8004682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2208      	movs	r2, #8
 8004688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f887 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 800469e:	e005      	b.n	80046ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f879 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f88a 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d10e      	bne.n	80046de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d107      	bne.n	80046de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f06f 0201 	mvn.w	r2, #1
 80046d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7fc fb8f 	bl	8000dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e8:	2b80      	cmp	r3, #128	; 0x80
 80046ea:	d10e      	bne.n	800470a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b80      	cmp	r3, #128	; 0x80
 80046f8:	d107      	bne.n	800470a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f99b 	bl	8004a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004718:	d10e      	bne.n	8004738 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b80      	cmp	r3, #128	; 0x80
 8004726:	d107      	bne.n	8004738 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f98e 	bl	8004a54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b40      	cmp	r3, #64	; 0x40
 8004744:	d10e      	bne.n	8004764 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d107      	bne.n	8004764 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800475c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f838 	bl	80047d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b20      	cmp	r3, #32
 8004770:	d10e      	bne.n	8004790 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b20      	cmp	r3, #32
 800477e:	d107      	bne.n	8004790 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0220 	mvn.w	r2, #32
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f94e 	bl	8004a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a40      	ldr	r2, [pc, #256]	; (80048fc <TIM_Base_SetConfig+0x114>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d013      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004806:	d00f      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3d      	ldr	r2, [pc, #244]	; (8004900 <TIM_Base_SetConfig+0x118>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00b      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3c      	ldr	r2, [pc, #240]	; (8004904 <TIM_Base_SetConfig+0x11c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d007      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3b      	ldr	r2, [pc, #236]	; (8004908 <TIM_Base_SetConfig+0x120>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d003      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3a      	ldr	r2, [pc, #232]	; (800490c <TIM_Base_SetConfig+0x124>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d108      	bne.n	800483a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2f      	ldr	r2, [pc, #188]	; (80048fc <TIM_Base_SetConfig+0x114>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01f      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d01b      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <TIM_Base_SetConfig+0x118>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d017      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <TIM_Base_SetConfig+0x11c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2a      	ldr	r2, [pc, #168]	; (8004908 <TIM_Base_SetConfig+0x120>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00f      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a29      	ldr	r2, [pc, #164]	; (800490c <TIM_Base_SetConfig+0x124>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00b      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a28      	ldr	r2, [pc, #160]	; (8004910 <TIM_Base_SetConfig+0x128>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a27      	ldr	r2, [pc, #156]	; (8004914 <TIM_Base_SetConfig+0x12c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d003      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a26      	ldr	r2, [pc, #152]	; (8004918 <TIM_Base_SetConfig+0x130>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d108      	bne.n	8004894 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a10      	ldr	r2, [pc, #64]	; (80048fc <TIM_Base_SetConfig+0x114>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00f      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a12      	ldr	r2, [pc, #72]	; (800490c <TIM_Base_SetConfig+0x124>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a11      	ldr	r2, [pc, #68]	; (8004910 <TIM_Base_SetConfig+0x128>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d007      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a10      	ldr	r2, [pc, #64]	; (8004914 <TIM_Base_SetConfig+0x12c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0f      	ldr	r2, [pc, #60]	; (8004918 <TIM_Base_SetConfig+0x130>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	615a      	str	r2, [r3, #20]
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40013400 	.word	0x40013400
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800

0800491c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004930:	2302      	movs	r3, #2
 8004932:	e068      	b.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2e      	ldr	r2, [pc, #184]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2d      	ldr	r2, [pc, #180]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d108      	bne.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800496e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004980:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01d      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d018      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1a      	ldr	r2, [pc, #104]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10c      	bne.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40013400 	.word	0x40013400
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00
 8004a28:	40014000 	.word	0x40014000

08004a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e042      	b.n	8004b00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fc fa81 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2224      	movs	r2, #36	; 0x24
 8004a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0201 	bic.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f8c4 	bl	8004c38 <UART_SetConfig>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e022      	b.n	8004b00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fbb4 	bl	8005230 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fc3b 	bl	8005374 <UART_CheckIdleState>
 8004afe:	4603      	mov	r3, r0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	; 0x28
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	4613      	mov	r3, r2
 8004b16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	f040 8084 	bne.w	8004c2c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_UART_Transmit+0x28>
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e07c      	b.n	8004c2e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_UART_Transmit+0x3a>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e075      	b.n	8004c2e <HAL_UART_Transmit+0x126>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2221      	movs	r2, #33	; 0x21
 8004b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b5a:	f7fc fbaf 	bl	80012bc <HAL_GetTick>
 8004b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	88fa      	ldrh	r2, [r7, #6]
 8004b64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b78:	d108      	bne.n	8004b8c <HAL_UART_Transmit+0x84>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d104      	bne.n	8004b8c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	e003      	b.n	8004b94 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004b9c:	e02d      	b.n	8004bfa <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fc2e 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e03a      	b.n	8004c2e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	881a      	ldrh	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bca:	b292      	uxth	r2, r2
 8004bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	e008      	b.n	8004be8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	b292      	uxth	r2, r2
 8004be0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3301      	adds	r3, #1
 8004be6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1cb      	bne.n	8004b9e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2140      	movs	r1, #64	; 0x40
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fbfa 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e006      	b.n	8004c2e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e000      	b.n	8004c2e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c3c:	b08c      	sub	sp, #48	; 0x30
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4baa      	ldr	r3, [pc, #680]	; (8004f10 <UART_SetConfig+0x2d8>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c70:	430b      	orrs	r3, r1
 8004c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a9f      	ldr	r2, [pc, #636]	; (8004f14 <UART_SetConfig+0x2dc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004cae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	f023 010f 	bic.w	r1, r3, #15
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a90      	ldr	r2, [pc, #576]	; (8004f18 <UART_SetConfig+0x2e0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d125      	bne.n	8004d28 <UART_SetConfig+0xf0>
 8004cdc:	4b8f      	ldr	r3, [pc, #572]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d81a      	bhi.n	8004d20 <UART_SetConfig+0xe8>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0xb8>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	08004d11 	.word	0x08004d11
 8004cf8:	08004d09 	.word	0x08004d09
 8004cfc:	08004d19 	.word	0x08004d19
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d06:	e116      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d0e:	e112      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d10:	2304      	movs	r3, #4
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d16:	e10e      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d18:	2308      	movs	r3, #8
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1e:	e10a      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d20:	2310      	movs	r3, #16
 8004d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d26:	e106      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a7c      	ldr	r2, [pc, #496]	; (8004f20 <UART_SetConfig+0x2e8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d138      	bne.n	8004da4 <UART_SetConfig+0x16c>
 8004d32:	4b7a      	ldr	r3, [pc, #488]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f003 030c 	and.w	r3, r3, #12
 8004d3c:	2b0c      	cmp	r3, #12
 8004d3e:	d82d      	bhi.n	8004d9c <UART_SetConfig+0x164>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0x110>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004d9d 	.word	0x08004d9d
 8004d50:	08004d9d 	.word	0x08004d9d
 8004d54:	08004d9d 	.word	0x08004d9d
 8004d58:	08004d8d 	.word	0x08004d8d
 8004d5c:	08004d9d 	.word	0x08004d9d
 8004d60:	08004d9d 	.word	0x08004d9d
 8004d64:	08004d9d 	.word	0x08004d9d
 8004d68:	08004d85 	.word	0x08004d85
 8004d6c:	08004d9d 	.word	0x08004d9d
 8004d70:	08004d9d 	.word	0x08004d9d
 8004d74:	08004d9d 	.word	0x08004d9d
 8004d78:	08004d95 	.word	0x08004d95
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d82:	e0d8      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d84:	2302      	movs	r3, #2
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8a:	e0d4      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d92:	e0d0      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d94:	2308      	movs	r3, #8
 8004d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9a:	e0cc      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da2:	e0c8      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a5e      	ldr	r2, [pc, #376]	; (8004f24 <UART_SetConfig+0x2ec>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d125      	bne.n	8004dfa <UART_SetConfig+0x1c2>
 8004dae:	4b5b      	ldr	r3, [pc, #364]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004db8:	2b30      	cmp	r3, #48	; 0x30
 8004dba:	d016      	beq.n	8004dea <UART_SetConfig+0x1b2>
 8004dbc:	2b30      	cmp	r3, #48	; 0x30
 8004dbe:	d818      	bhi.n	8004df2 <UART_SetConfig+0x1ba>
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d00a      	beq.n	8004dda <UART_SetConfig+0x1a2>
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d814      	bhi.n	8004df2 <UART_SetConfig+0x1ba>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <UART_SetConfig+0x19a>
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d008      	beq.n	8004de2 <UART_SetConfig+0x1aa>
 8004dd0:	e00f      	b.n	8004df2 <UART_SetConfig+0x1ba>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dd8:	e0ad      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004de0:	e0a9      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004de2:	2304      	movs	r3, #4
 8004de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004de8:	e0a5      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004dea:	2308      	movs	r3, #8
 8004dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df0:	e0a1      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004df2:	2310      	movs	r3, #16
 8004df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df8:	e09d      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a4a      	ldr	r2, [pc, #296]	; (8004f28 <UART_SetConfig+0x2f0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d125      	bne.n	8004e50 <UART_SetConfig+0x218>
 8004e04:	4b45      	ldr	r3, [pc, #276]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e0e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e10:	d016      	beq.n	8004e40 <UART_SetConfig+0x208>
 8004e12:	2bc0      	cmp	r3, #192	; 0xc0
 8004e14:	d818      	bhi.n	8004e48 <UART_SetConfig+0x210>
 8004e16:	2b80      	cmp	r3, #128	; 0x80
 8004e18:	d00a      	beq.n	8004e30 <UART_SetConfig+0x1f8>
 8004e1a:	2b80      	cmp	r3, #128	; 0x80
 8004e1c:	d814      	bhi.n	8004e48 <UART_SetConfig+0x210>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <UART_SetConfig+0x1f0>
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d008      	beq.n	8004e38 <UART_SetConfig+0x200>
 8004e26:	e00f      	b.n	8004e48 <UART_SetConfig+0x210>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e2e:	e082      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e30:	2302      	movs	r3, #2
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e36:	e07e      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e38:	2304      	movs	r3, #4
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3e:	e07a      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e40:	2308      	movs	r3, #8
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e46:	e076      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e4e:	e072      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a35      	ldr	r2, [pc, #212]	; (8004f2c <UART_SetConfig+0x2f4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d12a      	bne.n	8004eb0 <UART_SetConfig+0x278>
 8004e5a:	4b30      	ldr	r3, [pc, #192]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e68:	d01a      	beq.n	8004ea0 <UART_SetConfig+0x268>
 8004e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e6e:	d81b      	bhi.n	8004ea8 <UART_SetConfig+0x270>
 8004e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e74:	d00c      	beq.n	8004e90 <UART_SetConfig+0x258>
 8004e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7a:	d815      	bhi.n	8004ea8 <UART_SetConfig+0x270>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <UART_SetConfig+0x250>
 8004e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e84:	d008      	beq.n	8004e98 <UART_SetConfig+0x260>
 8004e86:	e00f      	b.n	8004ea8 <UART_SetConfig+0x270>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8e:	e052      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e90:	2302      	movs	r3, #2
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e96:	e04e      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9e:	e04a      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea6:	e046      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eae:	e042      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a17      	ldr	r2, [pc, #92]	; (8004f14 <UART_SetConfig+0x2dc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d13a      	bne.n	8004f30 <UART_SetConfig+0x2f8>
 8004eba:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ec8:	d01a      	beq.n	8004f00 <UART_SetConfig+0x2c8>
 8004eca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ece:	d81b      	bhi.n	8004f08 <UART_SetConfig+0x2d0>
 8004ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed4:	d00c      	beq.n	8004ef0 <UART_SetConfig+0x2b8>
 8004ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eda:	d815      	bhi.n	8004f08 <UART_SetConfig+0x2d0>
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <UART_SetConfig+0x2b0>
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee4:	d008      	beq.n	8004ef8 <UART_SetConfig+0x2c0>
 8004ee6:	e00f      	b.n	8004f08 <UART_SetConfig+0x2d0>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eee:	e022      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ef6:	e01e      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004efe:	e01a      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004f00:	2308      	movs	r3, #8
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f06:	e016      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f0e:	e012      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004f10:	cfff69f3 	.word	0xcfff69f3
 8004f14:	40008000 	.word	0x40008000
 8004f18:	40013800 	.word	0x40013800
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40004400 	.word	0x40004400
 8004f24:	40004800 	.word	0x40004800
 8004f28:	40004c00 	.word	0x40004c00
 8004f2c:	40005000 	.word	0x40005000
 8004f30:	2310      	movs	r3, #16
 8004f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4aae      	ldr	r2, [pc, #696]	; (80051f4 <UART_SetConfig+0x5bc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	f040 8097 	bne.w	8005070 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d823      	bhi.n	8004f92 <UART_SetConfig+0x35a>
 8004f4a:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <UART_SetConfig+0x318>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f93 	.word	0x08004f93
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004f93 	.word	0x08004f93
 8004f60:	08004f83 	.word	0x08004f83
 8004f64:	08004f93 	.word	0x08004f93
 8004f68:	08004f93 	.word	0x08004f93
 8004f6c:	08004f93 	.word	0x08004f93
 8004f70:	08004f8b 	.word	0x08004f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f74:	f7fe fbf6 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004f78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f7a:	e010      	b.n	8004f9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f7c:	4b9e      	ldr	r3, [pc, #632]	; (80051f8 <UART_SetConfig+0x5c0>)
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f80:	e00d      	b.n	8004f9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f82:	f7fe fb57 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 8004f86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f88:	e009      	b.n	8004f9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f90:	e005      	b.n	8004f9e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8130 	beq.w	8005206 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	4a94      	ldr	r2, [pc, #592]	; (80051fc <UART_SetConfig+0x5c4>)
 8004fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	4413      	add	r3, r2
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d305      	bcc.n	8004fd6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d903      	bls.n	8004fde <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fdc:	e113      	b.n	8005206 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	60bb      	str	r3, [r7, #8]
 8004fe4:	60fa      	str	r2, [r7, #12]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	4a84      	ldr	r2, [pc, #528]	; (80051fc <UART_SetConfig+0x5c4>)
 8004fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ffc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005000:	f7fb f956 	bl	80002b0 <__aeabi_uldivmod>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4610      	mov	r0, r2
 800500a:	4619      	mov	r1, r3
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	020b      	lsls	r3, r1, #8
 8005016:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800501a:	0202      	lsls	r2, r0, #8
 800501c:	6979      	ldr	r1, [r7, #20]
 800501e:	6849      	ldr	r1, [r1, #4]
 8005020:	0849      	lsrs	r1, r1, #1
 8005022:	2000      	movs	r0, #0
 8005024:	460c      	mov	r4, r1
 8005026:	4605      	mov	r5, r0
 8005028:	eb12 0804 	adds.w	r8, r2, r4
 800502c:	eb43 0905 	adc.w	r9, r3, r5
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	469a      	mov	sl, r3
 8005038:	4693      	mov	fp, r2
 800503a:	4652      	mov	r2, sl
 800503c:	465b      	mov	r3, fp
 800503e:	4640      	mov	r0, r8
 8005040:	4649      	mov	r1, r9
 8005042:	f7fb f935 	bl	80002b0 <__aeabi_uldivmod>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4613      	mov	r3, r2
 800504c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005054:	d308      	bcc.n	8005068 <UART_SetConfig+0x430>
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800505c:	d204      	bcs.n	8005068 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6a3a      	ldr	r2, [r7, #32]
 8005064:	60da      	str	r2, [r3, #12]
 8005066:	e0ce      	b.n	8005206 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800506e:	e0ca      	b.n	8005206 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005078:	d166      	bne.n	8005148 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800507a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800507e:	2b08      	cmp	r3, #8
 8005080:	d827      	bhi.n	80050d2 <UART_SetConfig+0x49a>
 8005082:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <UART_SetConfig+0x450>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050bd 	.word	0x080050bd
 8005094:	080050d3 	.word	0x080050d3
 8005098:	080050c3 	.word	0x080050c3
 800509c:	080050d3 	.word	0x080050d3
 80050a0:	080050d3 	.word	0x080050d3
 80050a4:	080050d3 	.word	0x080050d3
 80050a8:	080050cb 	.word	0x080050cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ac:	f7fe fb5a 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 80050b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050b2:	e014      	b.n	80050de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b4:	f7fe fb6c 	bl	8003790 <HAL_RCC_GetPCLK2Freq>
 80050b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050ba:	e010      	b.n	80050de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050bc:	4b4e      	ldr	r3, [pc, #312]	; (80051f8 <UART_SetConfig+0x5c0>)
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050c0:	e00d      	b.n	80050de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c2:	f7fe fab7 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 80050c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050c8:	e009      	b.n	80050de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050d0:	e005      	b.n	80050de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8090 	beq.w	8005206 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	4a44      	ldr	r2, [pc, #272]	; (80051fc <UART_SetConfig+0x5c4>)
 80050ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050f0:	461a      	mov	r2, r3
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050f8:	005a      	lsls	r2, r3, #1
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	441a      	add	r2, r3
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	fbb2 f3f3 	udiv	r3, r2, r3
 800510a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	2b0f      	cmp	r3, #15
 8005110:	d916      	bls.n	8005140 <UART_SetConfig+0x508>
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005118:	d212      	bcs.n	8005140 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f023 030f 	bic.w	r3, r3, #15
 8005122:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	b29b      	uxth	r3, r3
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	b29a      	uxth	r2, r3
 8005130:	8bfb      	ldrh	r3, [r7, #30]
 8005132:	4313      	orrs	r3, r2
 8005134:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	8bfa      	ldrh	r2, [r7, #30]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	e062      	b.n	8005206 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005146:	e05e      	b.n	8005206 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005148:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800514c:	2b08      	cmp	r3, #8
 800514e:	d828      	bhi.n	80051a2 <UART_SetConfig+0x56a>
 8005150:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <UART_SetConfig+0x520>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	0800517d 	.word	0x0800517d
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518d 	.word	0x0800518d
 8005164:	080051a3 	.word	0x080051a3
 8005168:	08005193 	.word	0x08005193
 800516c:	080051a3 	.word	0x080051a3
 8005170:	080051a3 	.word	0x080051a3
 8005174:	080051a3 	.word	0x080051a3
 8005178:	0800519b 	.word	0x0800519b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800517c:	f7fe faf2 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8005180:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005182:	e014      	b.n	80051ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7fe fb04 	bl	8003790 <HAL_RCC_GetPCLK2Freq>
 8005188:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800518a:	e010      	b.n	80051ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518c:	4b1a      	ldr	r3, [pc, #104]	; (80051f8 <UART_SetConfig+0x5c0>)
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005190:	e00d      	b.n	80051ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005192:	f7fe fa4f 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 8005196:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005198:	e009      	b.n	80051ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051a0:	e005      	b.n	80051ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051ac:	bf00      	nop
    }

    if (pclk != 0U)
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d028      	beq.n	8005206 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	4a10      	ldr	r2, [pc, #64]	; (80051fc <UART_SetConfig+0x5c4>)
 80051ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051be:	461a      	mov	r2, r3
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	441a      	add	r2, r3
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	2b0f      	cmp	r3, #15
 80051dc:	d910      	bls.n	8005200 <UART_SetConfig+0x5c8>
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e4:	d20c      	bcs.n	8005200 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	e009      	b.n	8005206 <UART_SetConfig+0x5ce>
 80051f2:	bf00      	nop
 80051f4:	40008000 	.word	0x40008000
 80051f8:	00f42400 	.word	0x00f42400
 80051fc:	0800616c 	.word	0x0800616c
      }
      else
      {
        ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2201      	movs	r2, #1
 800520a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2201      	movs	r2, #1
 8005212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2200      	movs	r2, #0
 800521a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2200      	movs	r2, #0
 8005220:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005222:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005226:	4618      	mov	r0, r3
 8005228:	3730      	adds	r7, #48	; 0x30
 800522a:	46bd      	mov	sp, r7
 800522c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01a      	beq.n	8005346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800532e:	d10a      	bne.n	8005346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af02      	add	r7, sp, #8
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005384:	f7fb ff9a 	bl	80012bc <HAL_GetTick>
 8005388:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b08      	cmp	r3, #8
 8005396:	d10e      	bne.n	80053b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005398:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f82f 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e025      	b.n	8005402 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d10e      	bne.n	80053e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f819 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e00f      	b.n	8005402 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b09c      	sub	sp, #112	; 0x70
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	4613      	mov	r3, r2
 8005418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800541a:	e0a9      	b.n	8005570 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	f000 80a5 	beq.w	8005570 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005426:	f7fb ff49 	bl	80012bc <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005432:	429a      	cmp	r2, r3
 8005434:	d302      	bcc.n	800543c <UART_WaitOnFlagUntilTimeout+0x32>
 8005436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005438:	2b00      	cmp	r3, #0
 800543a:	d140      	bne.n	80054be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800544a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005450:	667b      	str	r3, [r7, #100]	; 0x64
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800545a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800545c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005460:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e6      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3308      	adds	r3, #8
 8005474:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	663b      	str	r3, [r7, #96]	; 0x60
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3308      	adds	r3, #8
 800548c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800548e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005490:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800549c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e5      	bne.n	800546e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e069      	b.n	8005592 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d051      	beq.n	8005570 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054da:	d149      	bne.n	8005570 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005504:	637b      	str	r3, [r7, #52]	; 0x34
 8005506:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800550a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e6      	bne.n	80054e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3308      	adds	r3, #8
 800551e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	613b      	str	r3, [r7, #16]
   return(result);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3308      	adds	r3, #8
 8005536:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005538:	623a      	str	r2, [r7, #32]
 800553a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	69f9      	ldr	r1, [r7, #28]
 800553e:	6a3a      	ldr	r2, [r7, #32]
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	61bb      	str	r3, [r7, #24]
   return(result);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e5      	bne.n	8005518 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e010      	b.n	8005592 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4013      	ands	r3, r2
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	429a      	cmp	r2, r3
 800557e:	bf0c      	ite	eq
 8005580:	2301      	moveq	r3, #1
 8005582:	2300      	movne	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	429a      	cmp	r2, r3
 800558c:	f43f af46 	beq.w	800541c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3770      	adds	r7, #112	; 0x70
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800559a:	b480      	push	{r7}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e027      	b.n	8005600 <HAL_UARTEx_DisableFifoMode+0x66>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2224      	movs	r2, #36	; 0x24
 80055bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005620:	2302      	movs	r3, #2
 8005622:	e02d      	b.n	8005680 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2224      	movs	r2, #36	; 0x24
 8005630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f84f 	bl	8005704 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800569c:	2302      	movs	r3, #2
 800569e:	e02d      	b.n	80056fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2224      	movs	r2, #36	; 0x24
 80056ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0201 	bic.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f811 	bl	8005704 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005710:	2b00      	cmp	r3, #0
 8005712:	d108      	bne.n	8005726 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005724:	e031      	b.n	800578a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005726:	2308      	movs	r3, #8
 8005728:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800572a:	2308      	movs	r3, #8
 800572c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	0e5b      	lsrs	r3, r3, #25
 8005736:	b2db      	uxtb	r3, r3
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	0f5b      	lsrs	r3, r3, #29
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800574e:	7bbb      	ldrb	r3, [r7, #14]
 8005750:	7b3a      	ldrb	r2, [r7, #12]
 8005752:	4911      	ldr	r1, [pc, #68]	; (8005798 <UARTEx_SetNbDataToProcess+0x94>)
 8005754:	5c8a      	ldrb	r2, [r1, r2]
 8005756:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800575a:	7b3a      	ldrb	r2, [r7, #12]
 800575c:	490f      	ldr	r1, [pc, #60]	; (800579c <UARTEx_SetNbDataToProcess+0x98>)
 800575e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005760:	fb93 f3f2 	sdiv	r3, r3, r2
 8005764:	b29a      	uxth	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	7b7a      	ldrb	r2, [r7, #13]
 8005770:	4909      	ldr	r1, [pc, #36]	; (8005798 <UARTEx_SetNbDataToProcess+0x94>)
 8005772:	5c8a      	ldrb	r2, [r1, r2]
 8005774:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005778:	7b7a      	ldrb	r2, [r7, #13]
 800577a:	4908      	ldr	r1, [pc, #32]	; (800579c <UARTEx_SetNbDataToProcess+0x98>)
 800577c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800577e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005782:	b29a      	uxth	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	08006184 	.word	0x08006184
 800579c:	0800618c 	.word	0x0800618c

080057a0 <__errno>:
 80057a0:	4b01      	ldr	r3, [pc, #4]	; (80057a8 <__errno+0x8>)
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20000020 	.word	0x20000020

080057ac <__libc_init_array>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4d0d      	ldr	r5, [pc, #52]	; (80057e4 <__libc_init_array+0x38>)
 80057b0:	4c0d      	ldr	r4, [pc, #52]	; (80057e8 <__libc_init_array+0x3c>)
 80057b2:	1b64      	subs	r4, r4, r5
 80057b4:	10a4      	asrs	r4, r4, #2
 80057b6:	2600      	movs	r6, #0
 80057b8:	42a6      	cmp	r6, r4
 80057ba:	d109      	bne.n	80057d0 <__libc_init_array+0x24>
 80057bc:	4d0b      	ldr	r5, [pc, #44]	; (80057ec <__libc_init_array+0x40>)
 80057be:	4c0c      	ldr	r4, [pc, #48]	; (80057f0 <__libc_init_array+0x44>)
 80057c0:	f000 fc8e 	bl	80060e0 <_init>
 80057c4:	1b64      	subs	r4, r4, r5
 80057c6:	10a4      	asrs	r4, r4, #2
 80057c8:	2600      	movs	r6, #0
 80057ca:	42a6      	cmp	r6, r4
 80057cc:	d105      	bne.n	80057da <__libc_init_array+0x2e>
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d4:	4798      	blx	r3
 80057d6:	3601      	adds	r6, #1
 80057d8:	e7ee      	b.n	80057b8 <__libc_init_array+0xc>
 80057da:	f855 3b04 	ldr.w	r3, [r5], #4
 80057de:	4798      	blx	r3
 80057e0:	3601      	adds	r6, #1
 80057e2:	e7f2      	b.n	80057ca <__libc_init_array+0x1e>
 80057e4:	080061d0 	.word	0x080061d0
 80057e8:	080061d0 	.word	0x080061d0
 80057ec:	080061d0 	.word	0x080061d0
 80057f0:	080061d4 	.word	0x080061d4

080057f4 <memset>:
 80057f4:	4402      	add	r2, r0
 80057f6:	4603      	mov	r3, r0
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d100      	bne.n	80057fe <memset+0xa>
 80057fc:	4770      	bx	lr
 80057fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005802:	e7f9      	b.n	80057f8 <memset+0x4>

08005804 <siprintf>:
 8005804:	b40e      	push	{r1, r2, r3}
 8005806:	b500      	push	{lr}
 8005808:	b09c      	sub	sp, #112	; 0x70
 800580a:	ab1d      	add	r3, sp, #116	; 0x74
 800580c:	9002      	str	r0, [sp, #8]
 800580e:	9006      	str	r0, [sp, #24]
 8005810:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005814:	4809      	ldr	r0, [pc, #36]	; (800583c <siprintf+0x38>)
 8005816:	9107      	str	r1, [sp, #28]
 8005818:	9104      	str	r1, [sp, #16]
 800581a:	4909      	ldr	r1, [pc, #36]	; (8005840 <siprintf+0x3c>)
 800581c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005820:	9105      	str	r1, [sp, #20]
 8005822:	6800      	ldr	r0, [r0, #0]
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	a902      	add	r1, sp, #8
 8005828:	f000 f868 	bl	80058fc <_svfiprintf_r>
 800582c:	9b02      	ldr	r3, [sp, #8]
 800582e:	2200      	movs	r2, #0
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	b01c      	add	sp, #112	; 0x70
 8005834:	f85d eb04 	ldr.w	lr, [sp], #4
 8005838:	b003      	add	sp, #12
 800583a:	4770      	bx	lr
 800583c:	20000020 	.word	0x20000020
 8005840:	ffff0208 	.word	0xffff0208

08005844 <__ssputs_r>:
 8005844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	688e      	ldr	r6, [r1, #8]
 800584a:	429e      	cmp	r6, r3
 800584c:	4682      	mov	sl, r0
 800584e:	460c      	mov	r4, r1
 8005850:	4690      	mov	r8, r2
 8005852:	461f      	mov	r7, r3
 8005854:	d838      	bhi.n	80058c8 <__ssputs_r+0x84>
 8005856:	898a      	ldrh	r2, [r1, #12]
 8005858:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800585c:	d032      	beq.n	80058c4 <__ssputs_r+0x80>
 800585e:	6825      	ldr	r5, [r4, #0]
 8005860:	6909      	ldr	r1, [r1, #16]
 8005862:	eba5 0901 	sub.w	r9, r5, r1
 8005866:	6965      	ldr	r5, [r4, #20]
 8005868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800586c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005870:	3301      	adds	r3, #1
 8005872:	444b      	add	r3, r9
 8005874:	106d      	asrs	r5, r5, #1
 8005876:	429d      	cmp	r5, r3
 8005878:	bf38      	it	cc
 800587a:	461d      	movcc	r5, r3
 800587c:	0553      	lsls	r3, r2, #21
 800587e:	d531      	bpl.n	80058e4 <__ssputs_r+0xa0>
 8005880:	4629      	mov	r1, r5
 8005882:	f000 fb63 	bl	8005f4c <_malloc_r>
 8005886:	4606      	mov	r6, r0
 8005888:	b950      	cbnz	r0, 80058a0 <__ssputs_r+0x5c>
 800588a:	230c      	movs	r3, #12
 800588c:	f8ca 3000 	str.w	r3, [sl]
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005896:	81a3      	strh	r3, [r4, #12]
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a0:	6921      	ldr	r1, [r4, #16]
 80058a2:	464a      	mov	r2, r9
 80058a4:	f000 fabe 	bl	8005e24 <memcpy>
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	6126      	str	r6, [r4, #16]
 80058b6:	6165      	str	r5, [r4, #20]
 80058b8:	444e      	add	r6, r9
 80058ba:	eba5 0509 	sub.w	r5, r5, r9
 80058be:	6026      	str	r6, [r4, #0]
 80058c0:	60a5      	str	r5, [r4, #8]
 80058c2:	463e      	mov	r6, r7
 80058c4:	42be      	cmp	r6, r7
 80058c6:	d900      	bls.n	80058ca <__ssputs_r+0x86>
 80058c8:	463e      	mov	r6, r7
 80058ca:	6820      	ldr	r0, [r4, #0]
 80058cc:	4632      	mov	r2, r6
 80058ce:	4641      	mov	r1, r8
 80058d0:	f000 fab6 	bl	8005e40 <memmove>
 80058d4:	68a3      	ldr	r3, [r4, #8]
 80058d6:	1b9b      	subs	r3, r3, r6
 80058d8:	60a3      	str	r3, [r4, #8]
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	4433      	add	r3, r6
 80058de:	6023      	str	r3, [r4, #0]
 80058e0:	2000      	movs	r0, #0
 80058e2:	e7db      	b.n	800589c <__ssputs_r+0x58>
 80058e4:	462a      	mov	r2, r5
 80058e6:	f000 fba5 	bl	8006034 <_realloc_r>
 80058ea:	4606      	mov	r6, r0
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d1e1      	bne.n	80058b4 <__ssputs_r+0x70>
 80058f0:	6921      	ldr	r1, [r4, #16]
 80058f2:	4650      	mov	r0, sl
 80058f4:	f000 fabe 	bl	8005e74 <_free_r>
 80058f8:	e7c7      	b.n	800588a <__ssputs_r+0x46>
	...

080058fc <_svfiprintf_r>:
 80058fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	4698      	mov	r8, r3
 8005902:	898b      	ldrh	r3, [r1, #12]
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	b09d      	sub	sp, #116	; 0x74
 8005908:	4607      	mov	r7, r0
 800590a:	460d      	mov	r5, r1
 800590c:	4614      	mov	r4, r2
 800590e:	d50e      	bpl.n	800592e <_svfiprintf_r+0x32>
 8005910:	690b      	ldr	r3, [r1, #16]
 8005912:	b963      	cbnz	r3, 800592e <_svfiprintf_r+0x32>
 8005914:	2140      	movs	r1, #64	; 0x40
 8005916:	f000 fb19 	bl	8005f4c <_malloc_r>
 800591a:	6028      	str	r0, [r5, #0]
 800591c:	6128      	str	r0, [r5, #16]
 800591e:	b920      	cbnz	r0, 800592a <_svfiprintf_r+0x2e>
 8005920:	230c      	movs	r3, #12
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	f04f 30ff 	mov.w	r0, #4294967295
 8005928:	e0d1      	b.n	8005ace <_svfiprintf_r+0x1d2>
 800592a:	2340      	movs	r3, #64	; 0x40
 800592c:	616b      	str	r3, [r5, #20]
 800592e:	2300      	movs	r3, #0
 8005930:	9309      	str	r3, [sp, #36]	; 0x24
 8005932:	2320      	movs	r3, #32
 8005934:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005938:	f8cd 800c 	str.w	r8, [sp, #12]
 800593c:	2330      	movs	r3, #48	; 0x30
 800593e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ae8 <_svfiprintf_r+0x1ec>
 8005942:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005946:	f04f 0901 	mov.w	r9, #1
 800594a:	4623      	mov	r3, r4
 800594c:	469a      	mov	sl, r3
 800594e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005952:	b10a      	cbz	r2, 8005958 <_svfiprintf_r+0x5c>
 8005954:	2a25      	cmp	r2, #37	; 0x25
 8005956:	d1f9      	bne.n	800594c <_svfiprintf_r+0x50>
 8005958:	ebba 0b04 	subs.w	fp, sl, r4
 800595c:	d00b      	beq.n	8005976 <_svfiprintf_r+0x7a>
 800595e:	465b      	mov	r3, fp
 8005960:	4622      	mov	r2, r4
 8005962:	4629      	mov	r1, r5
 8005964:	4638      	mov	r0, r7
 8005966:	f7ff ff6d 	bl	8005844 <__ssputs_r>
 800596a:	3001      	adds	r0, #1
 800596c:	f000 80aa 	beq.w	8005ac4 <_svfiprintf_r+0x1c8>
 8005970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005972:	445a      	add	r2, fp
 8005974:	9209      	str	r2, [sp, #36]	; 0x24
 8005976:	f89a 3000 	ldrb.w	r3, [sl]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80a2 	beq.w	8005ac4 <_svfiprintf_r+0x1c8>
 8005980:	2300      	movs	r3, #0
 8005982:	f04f 32ff 	mov.w	r2, #4294967295
 8005986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800598a:	f10a 0a01 	add.w	sl, sl, #1
 800598e:	9304      	str	r3, [sp, #16]
 8005990:	9307      	str	r3, [sp, #28]
 8005992:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005996:	931a      	str	r3, [sp, #104]	; 0x68
 8005998:	4654      	mov	r4, sl
 800599a:	2205      	movs	r2, #5
 800599c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a0:	4851      	ldr	r0, [pc, #324]	; (8005ae8 <_svfiprintf_r+0x1ec>)
 80059a2:	f7fa fc35 	bl	8000210 <memchr>
 80059a6:	9a04      	ldr	r2, [sp, #16]
 80059a8:	b9d8      	cbnz	r0, 80059e2 <_svfiprintf_r+0xe6>
 80059aa:	06d0      	lsls	r0, r2, #27
 80059ac:	bf44      	itt	mi
 80059ae:	2320      	movmi	r3, #32
 80059b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059b4:	0711      	lsls	r1, r2, #28
 80059b6:	bf44      	itt	mi
 80059b8:	232b      	movmi	r3, #43	; 0x2b
 80059ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059be:	f89a 3000 	ldrb.w	r3, [sl]
 80059c2:	2b2a      	cmp	r3, #42	; 0x2a
 80059c4:	d015      	beq.n	80059f2 <_svfiprintf_r+0xf6>
 80059c6:	9a07      	ldr	r2, [sp, #28]
 80059c8:	4654      	mov	r4, sl
 80059ca:	2000      	movs	r0, #0
 80059cc:	f04f 0c0a 	mov.w	ip, #10
 80059d0:	4621      	mov	r1, r4
 80059d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059d6:	3b30      	subs	r3, #48	; 0x30
 80059d8:	2b09      	cmp	r3, #9
 80059da:	d94e      	bls.n	8005a7a <_svfiprintf_r+0x17e>
 80059dc:	b1b0      	cbz	r0, 8005a0c <_svfiprintf_r+0x110>
 80059de:	9207      	str	r2, [sp, #28]
 80059e0:	e014      	b.n	8005a0c <_svfiprintf_r+0x110>
 80059e2:	eba0 0308 	sub.w	r3, r0, r8
 80059e6:	fa09 f303 	lsl.w	r3, r9, r3
 80059ea:	4313      	orrs	r3, r2
 80059ec:	9304      	str	r3, [sp, #16]
 80059ee:	46a2      	mov	sl, r4
 80059f0:	e7d2      	b.n	8005998 <_svfiprintf_r+0x9c>
 80059f2:	9b03      	ldr	r3, [sp, #12]
 80059f4:	1d19      	adds	r1, r3, #4
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	9103      	str	r1, [sp, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	bfbb      	ittet	lt
 80059fe:	425b      	neglt	r3, r3
 8005a00:	f042 0202 	orrlt.w	r2, r2, #2
 8005a04:	9307      	strge	r3, [sp, #28]
 8005a06:	9307      	strlt	r3, [sp, #28]
 8005a08:	bfb8      	it	lt
 8005a0a:	9204      	strlt	r2, [sp, #16]
 8005a0c:	7823      	ldrb	r3, [r4, #0]
 8005a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a10:	d10c      	bne.n	8005a2c <_svfiprintf_r+0x130>
 8005a12:	7863      	ldrb	r3, [r4, #1]
 8005a14:	2b2a      	cmp	r3, #42	; 0x2a
 8005a16:	d135      	bne.n	8005a84 <_svfiprintf_r+0x188>
 8005a18:	9b03      	ldr	r3, [sp, #12]
 8005a1a:	1d1a      	adds	r2, r3, #4
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	9203      	str	r2, [sp, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bfb8      	it	lt
 8005a24:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a28:	3402      	adds	r4, #2
 8005a2a:	9305      	str	r3, [sp, #20]
 8005a2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005af8 <_svfiprintf_r+0x1fc>
 8005a30:	7821      	ldrb	r1, [r4, #0]
 8005a32:	2203      	movs	r2, #3
 8005a34:	4650      	mov	r0, sl
 8005a36:	f7fa fbeb 	bl	8000210 <memchr>
 8005a3a:	b140      	cbz	r0, 8005a4e <_svfiprintf_r+0x152>
 8005a3c:	2340      	movs	r3, #64	; 0x40
 8005a3e:	eba0 000a 	sub.w	r0, r0, sl
 8005a42:	fa03 f000 	lsl.w	r0, r3, r0
 8005a46:	9b04      	ldr	r3, [sp, #16]
 8005a48:	4303      	orrs	r3, r0
 8005a4a:	3401      	adds	r4, #1
 8005a4c:	9304      	str	r3, [sp, #16]
 8005a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a52:	4826      	ldr	r0, [pc, #152]	; (8005aec <_svfiprintf_r+0x1f0>)
 8005a54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a58:	2206      	movs	r2, #6
 8005a5a:	f7fa fbd9 	bl	8000210 <memchr>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d038      	beq.n	8005ad4 <_svfiprintf_r+0x1d8>
 8005a62:	4b23      	ldr	r3, [pc, #140]	; (8005af0 <_svfiprintf_r+0x1f4>)
 8005a64:	bb1b      	cbnz	r3, 8005aae <_svfiprintf_r+0x1b2>
 8005a66:	9b03      	ldr	r3, [sp, #12]
 8005a68:	3307      	adds	r3, #7
 8005a6a:	f023 0307 	bic.w	r3, r3, #7
 8005a6e:	3308      	adds	r3, #8
 8005a70:	9303      	str	r3, [sp, #12]
 8005a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a74:	4433      	add	r3, r6
 8005a76:	9309      	str	r3, [sp, #36]	; 0x24
 8005a78:	e767      	b.n	800594a <_svfiprintf_r+0x4e>
 8005a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a7e:	460c      	mov	r4, r1
 8005a80:	2001      	movs	r0, #1
 8005a82:	e7a5      	b.n	80059d0 <_svfiprintf_r+0xd4>
 8005a84:	2300      	movs	r3, #0
 8005a86:	3401      	adds	r4, #1
 8005a88:	9305      	str	r3, [sp, #20]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f04f 0c0a 	mov.w	ip, #10
 8005a90:	4620      	mov	r0, r4
 8005a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a96:	3a30      	subs	r2, #48	; 0x30
 8005a98:	2a09      	cmp	r2, #9
 8005a9a:	d903      	bls.n	8005aa4 <_svfiprintf_r+0x1a8>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0c5      	beq.n	8005a2c <_svfiprintf_r+0x130>
 8005aa0:	9105      	str	r1, [sp, #20]
 8005aa2:	e7c3      	b.n	8005a2c <_svfiprintf_r+0x130>
 8005aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e7f0      	b.n	8005a90 <_svfiprintf_r+0x194>
 8005aae:	ab03      	add	r3, sp, #12
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <_svfiprintf_r+0x1f8>)
 8005ab6:	a904      	add	r1, sp, #16
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f3af 8000 	nop.w
 8005abe:	1c42      	adds	r2, r0, #1
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	d1d6      	bne.n	8005a72 <_svfiprintf_r+0x176>
 8005ac4:	89ab      	ldrh	r3, [r5, #12]
 8005ac6:	065b      	lsls	r3, r3, #25
 8005ac8:	f53f af2c 	bmi.w	8005924 <_svfiprintf_r+0x28>
 8005acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ace:	b01d      	add	sp, #116	; 0x74
 8005ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad4:	ab03      	add	r3, sp, #12
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	462a      	mov	r2, r5
 8005ada:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <_svfiprintf_r+0x1f8>)
 8005adc:	a904      	add	r1, sp, #16
 8005ade:	4638      	mov	r0, r7
 8005ae0:	f000 f87a 	bl	8005bd8 <_printf_i>
 8005ae4:	e7eb      	b.n	8005abe <_svfiprintf_r+0x1c2>
 8005ae6:	bf00      	nop
 8005ae8:	08006194 	.word	0x08006194
 8005aec:	0800619e 	.word	0x0800619e
 8005af0:	00000000 	.word	0x00000000
 8005af4:	08005845 	.word	0x08005845
 8005af8:	0800619a 	.word	0x0800619a

08005afc <_printf_common>:
 8005afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b00:	4616      	mov	r6, r2
 8005b02:	4699      	mov	r9, r3
 8005b04:	688a      	ldr	r2, [r1, #8]
 8005b06:	690b      	ldr	r3, [r1, #16]
 8005b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	bfb8      	it	lt
 8005b10:	4613      	movlt	r3, r2
 8005b12:	6033      	str	r3, [r6, #0]
 8005b14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b18:	4607      	mov	r7, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	b10a      	cbz	r2, 8005b22 <_printf_common+0x26>
 8005b1e:	3301      	adds	r3, #1
 8005b20:	6033      	str	r3, [r6, #0]
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	0699      	lsls	r1, r3, #26
 8005b26:	bf42      	ittt	mi
 8005b28:	6833      	ldrmi	r3, [r6, #0]
 8005b2a:	3302      	addmi	r3, #2
 8005b2c:	6033      	strmi	r3, [r6, #0]
 8005b2e:	6825      	ldr	r5, [r4, #0]
 8005b30:	f015 0506 	ands.w	r5, r5, #6
 8005b34:	d106      	bne.n	8005b44 <_printf_common+0x48>
 8005b36:	f104 0a19 	add.w	sl, r4, #25
 8005b3a:	68e3      	ldr	r3, [r4, #12]
 8005b3c:	6832      	ldr	r2, [r6, #0]
 8005b3e:	1a9b      	subs	r3, r3, r2
 8005b40:	42ab      	cmp	r3, r5
 8005b42:	dc26      	bgt.n	8005b92 <_printf_common+0x96>
 8005b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b48:	1e13      	subs	r3, r2, #0
 8005b4a:	6822      	ldr	r2, [r4, #0]
 8005b4c:	bf18      	it	ne
 8005b4e:	2301      	movne	r3, #1
 8005b50:	0692      	lsls	r2, r2, #26
 8005b52:	d42b      	bmi.n	8005bac <_printf_common+0xb0>
 8005b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b58:	4649      	mov	r1, r9
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	47c0      	blx	r8
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d01e      	beq.n	8005ba0 <_printf_common+0xa4>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	68e5      	ldr	r5, [r4, #12]
 8005b66:	6832      	ldr	r2, [r6, #0]
 8005b68:	f003 0306 	and.w	r3, r3, #6
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	bf08      	it	eq
 8005b70:	1aad      	subeq	r5, r5, r2
 8005b72:	68a3      	ldr	r3, [r4, #8]
 8005b74:	6922      	ldr	r2, [r4, #16]
 8005b76:	bf0c      	ite	eq
 8005b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b7c:	2500      	movne	r5, #0
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	bfc4      	itt	gt
 8005b82:	1a9b      	subgt	r3, r3, r2
 8005b84:	18ed      	addgt	r5, r5, r3
 8005b86:	2600      	movs	r6, #0
 8005b88:	341a      	adds	r4, #26
 8005b8a:	42b5      	cmp	r5, r6
 8005b8c:	d11a      	bne.n	8005bc4 <_printf_common+0xc8>
 8005b8e:	2000      	movs	r0, #0
 8005b90:	e008      	b.n	8005ba4 <_printf_common+0xa8>
 8005b92:	2301      	movs	r3, #1
 8005b94:	4652      	mov	r2, sl
 8005b96:	4649      	mov	r1, r9
 8005b98:	4638      	mov	r0, r7
 8005b9a:	47c0      	blx	r8
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d103      	bne.n	8005ba8 <_printf_common+0xac>
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba8:	3501      	adds	r5, #1
 8005baa:	e7c6      	b.n	8005b3a <_printf_common+0x3e>
 8005bac:	18e1      	adds	r1, r4, r3
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	2030      	movs	r0, #48	; 0x30
 8005bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bb6:	4422      	add	r2, r4
 8005bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	e7c7      	b.n	8005b54 <_printf_common+0x58>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	4649      	mov	r1, r9
 8005bca:	4638      	mov	r0, r7
 8005bcc:	47c0      	blx	r8
 8005bce:	3001      	adds	r0, #1
 8005bd0:	d0e6      	beq.n	8005ba0 <_printf_common+0xa4>
 8005bd2:	3601      	adds	r6, #1
 8005bd4:	e7d9      	b.n	8005b8a <_printf_common+0x8e>
	...

08005bd8 <_printf_i>:
 8005bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bdc:	7e0f      	ldrb	r7, [r1, #24]
 8005bde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005be0:	2f78      	cmp	r7, #120	; 0x78
 8005be2:	4691      	mov	r9, r2
 8005be4:	4680      	mov	r8, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	469a      	mov	sl, r3
 8005bea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bee:	d807      	bhi.n	8005c00 <_printf_i+0x28>
 8005bf0:	2f62      	cmp	r7, #98	; 0x62
 8005bf2:	d80a      	bhi.n	8005c0a <_printf_i+0x32>
 8005bf4:	2f00      	cmp	r7, #0
 8005bf6:	f000 80d8 	beq.w	8005daa <_printf_i+0x1d2>
 8005bfa:	2f58      	cmp	r7, #88	; 0x58
 8005bfc:	f000 80a3 	beq.w	8005d46 <_printf_i+0x16e>
 8005c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c08:	e03a      	b.n	8005c80 <_printf_i+0xa8>
 8005c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c0e:	2b15      	cmp	r3, #21
 8005c10:	d8f6      	bhi.n	8005c00 <_printf_i+0x28>
 8005c12:	a101      	add	r1, pc, #4	; (adr r1, 8005c18 <_printf_i+0x40>)
 8005c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c18:	08005c71 	.word	0x08005c71
 8005c1c:	08005c85 	.word	0x08005c85
 8005c20:	08005c01 	.word	0x08005c01
 8005c24:	08005c01 	.word	0x08005c01
 8005c28:	08005c01 	.word	0x08005c01
 8005c2c:	08005c01 	.word	0x08005c01
 8005c30:	08005c85 	.word	0x08005c85
 8005c34:	08005c01 	.word	0x08005c01
 8005c38:	08005c01 	.word	0x08005c01
 8005c3c:	08005c01 	.word	0x08005c01
 8005c40:	08005c01 	.word	0x08005c01
 8005c44:	08005d91 	.word	0x08005d91
 8005c48:	08005cb5 	.word	0x08005cb5
 8005c4c:	08005d73 	.word	0x08005d73
 8005c50:	08005c01 	.word	0x08005c01
 8005c54:	08005c01 	.word	0x08005c01
 8005c58:	08005db3 	.word	0x08005db3
 8005c5c:	08005c01 	.word	0x08005c01
 8005c60:	08005cb5 	.word	0x08005cb5
 8005c64:	08005c01 	.word	0x08005c01
 8005c68:	08005c01 	.word	0x08005c01
 8005c6c:	08005d7b 	.word	0x08005d7b
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	1d1a      	adds	r2, r3, #4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	602a      	str	r2, [r5, #0]
 8005c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0a3      	b.n	8005dcc <_printf_i+0x1f4>
 8005c84:	6820      	ldr	r0, [r4, #0]
 8005c86:	6829      	ldr	r1, [r5, #0]
 8005c88:	0606      	lsls	r6, r0, #24
 8005c8a:	f101 0304 	add.w	r3, r1, #4
 8005c8e:	d50a      	bpl.n	8005ca6 <_printf_i+0xce>
 8005c90:	680e      	ldr	r6, [r1, #0]
 8005c92:	602b      	str	r3, [r5, #0]
 8005c94:	2e00      	cmp	r6, #0
 8005c96:	da03      	bge.n	8005ca0 <_printf_i+0xc8>
 8005c98:	232d      	movs	r3, #45	; 0x2d
 8005c9a:	4276      	negs	r6, r6
 8005c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca0:	485e      	ldr	r0, [pc, #376]	; (8005e1c <_printf_i+0x244>)
 8005ca2:	230a      	movs	r3, #10
 8005ca4:	e019      	b.n	8005cda <_printf_i+0x102>
 8005ca6:	680e      	ldr	r6, [r1, #0]
 8005ca8:	602b      	str	r3, [r5, #0]
 8005caa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cae:	bf18      	it	ne
 8005cb0:	b236      	sxthne	r6, r6
 8005cb2:	e7ef      	b.n	8005c94 <_printf_i+0xbc>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	6820      	ldr	r0, [r4, #0]
 8005cb8:	1d19      	adds	r1, r3, #4
 8005cba:	6029      	str	r1, [r5, #0]
 8005cbc:	0601      	lsls	r1, r0, #24
 8005cbe:	d501      	bpl.n	8005cc4 <_printf_i+0xec>
 8005cc0:	681e      	ldr	r6, [r3, #0]
 8005cc2:	e002      	b.n	8005cca <_printf_i+0xf2>
 8005cc4:	0646      	lsls	r6, r0, #25
 8005cc6:	d5fb      	bpl.n	8005cc0 <_printf_i+0xe8>
 8005cc8:	881e      	ldrh	r6, [r3, #0]
 8005cca:	4854      	ldr	r0, [pc, #336]	; (8005e1c <_printf_i+0x244>)
 8005ccc:	2f6f      	cmp	r7, #111	; 0x6f
 8005cce:	bf0c      	ite	eq
 8005cd0:	2308      	moveq	r3, #8
 8005cd2:	230a      	movne	r3, #10
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cda:	6865      	ldr	r5, [r4, #4]
 8005cdc:	60a5      	str	r5, [r4, #8]
 8005cde:	2d00      	cmp	r5, #0
 8005ce0:	bfa2      	ittt	ge
 8005ce2:	6821      	ldrge	r1, [r4, #0]
 8005ce4:	f021 0104 	bicge.w	r1, r1, #4
 8005ce8:	6021      	strge	r1, [r4, #0]
 8005cea:	b90e      	cbnz	r6, 8005cf0 <_printf_i+0x118>
 8005cec:	2d00      	cmp	r5, #0
 8005cee:	d04d      	beq.n	8005d8c <_printf_i+0x1b4>
 8005cf0:	4615      	mov	r5, r2
 8005cf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cf6:	fb03 6711 	mls	r7, r3, r1, r6
 8005cfa:	5dc7      	ldrb	r7, [r0, r7]
 8005cfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d00:	4637      	mov	r7, r6
 8005d02:	42bb      	cmp	r3, r7
 8005d04:	460e      	mov	r6, r1
 8005d06:	d9f4      	bls.n	8005cf2 <_printf_i+0x11a>
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d10b      	bne.n	8005d24 <_printf_i+0x14c>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	07de      	lsls	r6, r3, #31
 8005d10:	d508      	bpl.n	8005d24 <_printf_i+0x14c>
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	6861      	ldr	r1, [r4, #4]
 8005d16:	4299      	cmp	r1, r3
 8005d18:	bfde      	ittt	le
 8005d1a:	2330      	movle	r3, #48	; 0x30
 8005d1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d24:	1b52      	subs	r2, r2, r5
 8005d26:	6122      	str	r2, [r4, #16]
 8005d28:	f8cd a000 	str.w	sl, [sp]
 8005d2c:	464b      	mov	r3, r9
 8005d2e:	aa03      	add	r2, sp, #12
 8005d30:	4621      	mov	r1, r4
 8005d32:	4640      	mov	r0, r8
 8005d34:	f7ff fee2 	bl	8005afc <_printf_common>
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d14c      	bne.n	8005dd6 <_printf_i+0x1fe>
 8005d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d40:	b004      	add	sp, #16
 8005d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d46:	4835      	ldr	r0, [pc, #212]	; (8005e1c <_printf_i+0x244>)
 8005d48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d4c:	6829      	ldr	r1, [r5, #0]
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d54:	6029      	str	r1, [r5, #0]
 8005d56:	061d      	lsls	r5, r3, #24
 8005d58:	d514      	bpl.n	8005d84 <_printf_i+0x1ac>
 8005d5a:	07df      	lsls	r7, r3, #31
 8005d5c:	bf44      	itt	mi
 8005d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d62:	6023      	strmi	r3, [r4, #0]
 8005d64:	b91e      	cbnz	r6, 8005d6e <_printf_i+0x196>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	f023 0320 	bic.w	r3, r3, #32
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	2310      	movs	r3, #16
 8005d70:	e7b0      	b.n	8005cd4 <_printf_i+0xfc>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	f043 0320 	orr.w	r3, r3, #32
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	2378      	movs	r3, #120	; 0x78
 8005d7c:	4828      	ldr	r0, [pc, #160]	; (8005e20 <_printf_i+0x248>)
 8005d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d82:	e7e3      	b.n	8005d4c <_printf_i+0x174>
 8005d84:	0659      	lsls	r1, r3, #25
 8005d86:	bf48      	it	mi
 8005d88:	b2b6      	uxthmi	r6, r6
 8005d8a:	e7e6      	b.n	8005d5a <_printf_i+0x182>
 8005d8c:	4615      	mov	r5, r2
 8005d8e:	e7bb      	b.n	8005d08 <_printf_i+0x130>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	6826      	ldr	r6, [r4, #0]
 8005d94:	6961      	ldr	r1, [r4, #20]
 8005d96:	1d18      	adds	r0, r3, #4
 8005d98:	6028      	str	r0, [r5, #0]
 8005d9a:	0635      	lsls	r5, r6, #24
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	d501      	bpl.n	8005da4 <_printf_i+0x1cc>
 8005da0:	6019      	str	r1, [r3, #0]
 8005da2:	e002      	b.n	8005daa <_printf_i+0x1d2>
 8005da4:	0670      	lsls	r0, r6, #25
 8005da6:	d5fb      	bpl.n	8005da0 <_printf_i+0x1c8>
 8005da8:	8019      	strh	r1, [r3, #0]
 8005daa:	2300      	movs	r3, #0
 8005dac:	6123      	str	r3, [r4, #16]
 8005dae:	4615      	mov	r5, r2
 8005db0:	e7ba      	b.n	8005d28 <_printf_i+0x150>
 8005db2:	682b      	ldr	r3, [r5, #0]
 8005db4:	1d1a      	adds	r2, r3, #4
 8005db6:	602a      	str	r2, [r5, #0]
 8005db8:	681d      	ldr	r5, [r3, #0]
 8005dba:	6862      	ldr	r2, [r4, #4]
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f7fa fa26 	bl	8000210 <memchr>
 8005dc4:	b108      	cbz	r0, 8005dca <_printf_i+0x1f2>
 8005dc6:	1b40      	subs	r0, r0, r5
 8005dc8:	6060      	str	r0, [r4, #4]
 8005dca:	6863      	ldr	r3, [r4, #4]
 8005dcc:	6123      	str	r3, [r4, #16]
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dd4:	e7a8      	b.n	8005d28 <_printf_i+0x150>
 8005dd6:	6923      	ldr	r3, [r4, #16]
 8005dd8:	462a      	mov	r2, r5
 8005dda:	4649      	mov	r1, r9
 8005ddc:	4640      	mov	r0, r8
 8005dde:	47d0      	blx	sl
 8005de0:	3001      	adds	r0, #1
 8005de2:	d0ab      	beq.n	8005d3c <_printf_i+0x164>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	079b      	lsls	r3, r3, #30
 8005de8:	d413      	bmi.n	8005e12 <_printf_i+0x23a>
 8005dea:	68e0      	ldr	r0, [r4, #12]
 8005dec:	9b03      	ldr	r3, [sp, #12]
 8005dee:	4298      	cmp	r0, r3
 8005df0:	bfb8      	it	lt
 8005df2:	4618      	movlt	r0, r3
 8005df4:	e7a4      	b.n	8005d40 <_printf_i+0x168>
 8005df6:	2301      	movs	r3, #1
 8005df8:	4632      	mov	r2, r6
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	47d0      	blx	sl
 8005e00:	3001      	adds	r0, #1
 8005e02:	d09b      	beq.n	8005d3c <_printf_i+0x164>
 8005e04:	3501      	adds	r5, #1
 8005e06:	68e3      	ldr	r3, [r4, #12]
 8005e08:	9903      	ldr	r1, [sp, #12]
 8005e0a:	1a5b      	subs	r3, r3, r1
 8005e0c:	42ab      	cmp	r3, r5
 8005e0e:	dcf2      	bgt.n	8005df6 <_printf_i+0x21e>
 8005e10:	e7eb      	b.n	8005dea <_printf_i+0x212>
 8005e12:	2500      	movs	r5, #0
 8005e14:	f104 0619 	add.w	r6, r4, #25
 8005e18:	e7f5      	b.n	8005e06 <_printf_i+0x22e>
 8005e1a:	bf00      	nop
 8005e1c:	080061a5 	.word	0x080061a5
 8005e20:	080061b6 	.word	0x080061b6

08005e24 <memcpy>:
 8005e24:	440a      	add	r2, r1
 8005e26:	4291      	cmp	r1, r2
 8005e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e2c:	d100      	bne.n	8005e30 <memcpy+0xc>
 8005e2e:	4770      	bx	lr
 8005e30:	b510      	push	{r4, lr}
 8005e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e3a:	4291      	cmp	r1, r2
 8005e3c:	d1f9      	bne.n	8005e32 <memcpy+0xe>
 8005e3e:	bd10      	pop	{r4, pc}

08005e40 <memmove>:
 8005e40:	4288      	cmp	r0, r1
 8005e42:	b510      	push	{r4, lr}
 8005e44:	eb01 0402 	add.w	r4, r1, r2
 8005e48:	d902      	bls.n	8005e50 <memmove+0x10>
 8005e4a:	4284      	cmp	r4, r0
 8005e4c:	4623      	mov	r3, r4
 8005e4e:	d807      	bhi.n	8005e60 <memmove+0x20>
 8005e50:	1e43      	subs	r3, r0, #1
 8005e52:	42a1      	cmp	r1, r4
 8005e54:	d008      	beq.n	8005e68 <memmove+0x28>
 8005e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e5e:	e7f8      	b.n	8005e52 <memmove+0x12>
 8005e60:	4402      	add	r2, r0
 8005e62:	4601      	mov	r1, r0
 8005e64:	428a      	cmp	r2, r1
 8005e66:	d100      	bne.n	8005e6a <memmove+0x2a>
 8005e68:	bd10      	pop	{r4, pc}
 8005e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e72:	e7f7      	b.n	8005e64 <memmove+0x24>

08005e74 <_free_r>:
 8005e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e76:	2900      	cmp	r1, #0
 8005e78:	d044      	beq.n	8005f04 <_free_r+0x90>
 8005e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e7e:	9001      	str	r0, [sp, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f1a1 0404 	sub.w	r4, r1, #4
 8005e86:	bfb8      	it	lt
 8005e88:	18e4      	addlt	r4, r4, r3
 8005e8a:	f000 f913 	bl	80060b4 <__malloc_lock>
 8005e8e:	4a1e      	ldr	r2, [pc, #120]	; (8005f08 <_free_r+0x94>)
 8005e90:	9801      	ldr	r0, [sp, #4]
 8005e92:	6813      	ldr	r3, [r2, #0]
 8005e94:	b933      	cbnz	r3, 8005ea4 <_free_r+0x30>
 8005e96:	6063      	str	r3, [r4, #4]
 8005e98:	6014      	str	r4, [r2, #0]
 8005e9a:	b003      	add	sp, #12
 8005e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ea0:	f000 b90e 	b.w	80060c0 <__malloc_unlock>
 8005ea4:	42a3      	cmp	r3, r4
 8005ea6:	d908      	bls.n	8005eba <_free_r+0x46>
 8005ea8:	6825      	ldr	r5, [r4, #0]
 8005eaa:	1961      	adds	r1, r4, r5
 8005eac:	428b      	cmp	r3, r1
 8005eae:	bf01      	itttt	eq
 8005eb0:	6819      	ldreq	r1, [r3, #0]
 8005eb2:	685b      	ldreq	r3, [r3, #4]
 8005eb4:	1949      	addeq	r1, r1, r5
 8005eb6:	6021      	streq	r1, [r4, #0]
 8005eb8:	e7ed      	b.n	8005e96 <_free_r+0x22>
 8005eba:	461a      	mov	r2, r3
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	b10b      	cbz	r3, 8005ec4 <_free_r+0x50>
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	d9fa      	bls.n	8005eba <_free_r+0x46>
 8005ec4:	6811      	ldr	r1, [r2, #0]
 8005ec6:	1855      	adds	r5, r2, r1
 8005ec8:	42a5      	cmp	r5, r4
 8005eca:	d10b      	bne.n	8005ee4 <_free_r+0x70>
 8005ecc:	6824      	ldr	r4, [r4, #0]
 8005ece:	4421      	add	r1, r4
 8005ed0:	1854      	adds	r4, r2, r1
 8005ed2:	42a3      	cmp	r3, r4
 8005ed4:	6011      	str	r1, [r2, #0]
 8005ed6:	d1e0      	bne.n	8005e9a <_free_r+0x26>
 8005ed8:	681c      	ldr	r4, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	6053      	str	r3, [r2, #4]
 8005ede:	4421      	add	r1, r4
 8005ee0:	6011      	str	r1, [r2, #0]
 8005ee2:	e7da      	b.n	8005e9a <_free_r+0x26>
 8005ee4:	d902      	bls.n	8005eec <_free_r+0x78>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	6003      	str	r3, [r0, #0]
 8005eea:	e7d6      	b.n	8005e9a <_free_r+0x26>
 8005eec:	6825      	ldr	r5, [r4, #0]
 8005eee:	1961      	adds	r1, r4, r5
 8005ef0:	428b      	cmp	r3, r1
 8005ef2:	bf04      	itt	eq
 8005ef4:	6819      	ldreq	r1, [r3, #0]
 8005ef6:	685b      	ldreq	r3, [r3, #4]
 8005ef8:	6063      	str	r3, [r4, #4]
 8005efa:	bf04      	itt	eq
 8005efc:	1949      	addeq	r1, r1, r5
 8005efe:	6021      	streq	r1, [r4, #0]
 8005f00:	6054      	str	r4, [r2, #4]
 8005f02:	e7ca      	b.n	8005e9a <_free_r+0x26>
 8005f04:	b003      	add	sp, #12
 8005f06:	bd30      	pop	{r4, r5, pc}
 8005f08:	20000268 	.word	0x20000268

08005f0c <sbrk_aligned>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	4e0e      	ldr	r6, [pc, #56]	; (8005f48 <sbrk_aligned+0x3c>)
 8005f10:	460c      	mov	r4, r1
 8005f12:	6831      	ldr	r1, [r6, #0]
 8005f14:	4605      	mov	r5, r0
 8005f16:	b911      	cbnz	r1, 8005f1e <sbrk_aligned+0x12>
 8005f18:	f000 f8bc 	bl	8006094 <_sbrk_r>
 8005f1c:	6030      	str	r0, [r6, #0]
 8005f1e:	4621      	mov	r1, r4
 8005f20:	4628      	mov	r0, r5
 8005f22:	f000 f8b7 	bl	8006094 <_sbrk_r>
 8005f26:	1c43      	adds	r3, r0, #1
 8005f28:	d00a      	beq.n	8005f40 <sbrk_aligned+0x34>
 8005f2a:	1cc4      	adds	r4, r0, #3
 8005f2c:	f024 0403 	bic.w	r4, r4, #3
 8005f30:	42a0      	cmp	r0, r4
 8005f32:	d007      	beq.n	8005f44 <sbrk_aligned+0x38>
 8005f34:	1a21      	subs	r1, r4, r0
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 f8ac 	bl	8006094 <_sbrk_r>
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d101      	bne.n	8005f44 <sbrk_aligned+0x38>
 8005f40:	f04f 34ff 	mov.w	r4, #4294967295
 8005f44:	4620      	mov	r0, r4
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	2000026c 	.word	0x2000026c

08005f4c <_malloc_r>:
 8005f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f50:	1ccd      	adds	r5, r1, #3
 8005f52:	f025 0503 	bic.w	r5, r5, #3
 8005f56:	3508      	adds	r5, #8
 8005f58:	2d0c      	cmp	r5, #12
 8005f5a:	bf38      	it	cc
 8005f5c:	250c      	movcc	r5, #12
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	4607      	mov	r7, r0
 8005f62:	db01      	blt.n	8005f68 <_malloc_r+0x1c>
 8005f64:	42a9      	cmp	r1, r5
 8005f66:	d905      	bls.n	8005f74 <_malloc_r+0x28>
 8005f68:	230c      	movs	r3, #12
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	2600      	movs	r6, #0
 8005f6e:	4630      	mov	r0, r6
 8005f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f74:	4e2e      	ldr	r6, [pc, #184]	; (8006030 <_malloc_r+0xe4>)
 8005f76:	f000 f89d 	bl	80060b4 <__malloc_lock>
 8005f7a:	6833      	ldr	r3, [r6, #0]
 8005f7c:	461c      	mov	r4, r3
 8005f7e:	bb34      	cbnz	r4, 8005fce <_malloc_r+0x82>
 8005f80:	4629      	mov	r1, r5
 8005f82:	4638      	mov	r0, r7
 8005f84:	f7ff ffc2 	bl	8005f0c <sbrk_aligned>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	d14d      	bne.n	800602a <_malloc_r+0xde>
 8005f8e:	6834      	ldr	r4, [r6, #0]
 8005f90:	4626      	mov	r6, r4
 8005f92:	2e00      	cmp	r6, #0
 8005f94:	d140      	bne.n	8006018 <_malloc_r+0xcc>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	eb04 0803 	add.w	r8, r4, r3
 8005fa0:	f000 f878 	bl	8006094 <_sbrk_r>
 8005fa4:	4580      	cmp	r8, r0
 8005fa6:	d13a      	bne.n	800601e <_malloc_r+0xd2>
 8005fa8:	6821      	ldr	r1, [r4, #0]
 8005faa:	3503      	adds	r5, #3
 8005fac:	1a6d      	subs	r5, r5, r1
 8005fae:	f025 0503 	bic.w	r5, r5, #3
 8005fb2:	3508      	adds	r5, #8
 8005fb4:	2d0c      	cmp	r5, #12
 8005fb6:	bf38      	it	cc
 8005fb8:	250c      	movcc	r5, #12
 8005fba:	4629      	mov	r1, r5
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	f7ff ffa5 	bl	8005f0c <sbrk_aligned>
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d02b      	beq.n	800601e <_malloc_r+0xd2>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	442b      	add	r3, r5
 8005fca:	6023      	str	r3, [r4, #0]
 8005fcc:	e00e      	b.n	8005fec <_malloc_r+0xa0>
 8005fce:	6822      	ldr	r2, [r4, #0]
 8005fd0:	1b52      	subs	r2, r2, r5
 8005fd2:	d41e      	bmi.n	8006012 <_malloc_r+0xc6>
 8005fd4:	2a0b      	cmp	r2, #11
 8005fd6:	d916      	bls.n	8006006 <_malloc_r+0xba>
 8005fd8:	1961      	adds	r1, r4, r5
 8005fda:	42a3      	cmp	r3, r4
 8005fdc:	6025      	str	r5, [r4, #0]
 8005fde:	bf18      	it	ne
 8005fe0:	6059      	strne	r1, [r3, #4]
 8005fe2:	6863      	ldr	r3, [r4, #4]
 8005fe4:	bf08      	it	eq
 8005fe6:	6031      	streq	r1, [r6, #0]
 8005fe8:	5162      	str	r2, [r4, r5]
 8005fea:	604b      	str	r3, [r1, #4]
 8005fec:	4638      	mov	r0, r7
 8005fee:	f104 060b 	add.w	r6, r4, #11
 8005ff2:	f000 f865 	bl	80060c0 <__malloc_unlock>
 8005ff6:	f026 0607 	bic.w	r6, r6, #7
 8005ffa:	1d23      	adds	r3, r4, #4
 8005ffc:	1af2      	subs	r2, r6, r3
 8005ffe:	d0b6      	beq.n	8005f6e <_malloc_r+0x22>
 8006000:	1b9b      	subs	r3, r3, r6
 8006002:	50a3      	str	r3, [r4, r2]
 8006004:	e7b3      	b.n	8005f6e <_malloc_r+0x22>
 8006006:	6862      	ldr	r2, [r4, #4]
 8006008:	42a3      	cmp	r3, r4
 800600a:	bf0c      	ite	eq
 800600c:	6032      	streq	r2, [r6, #0]
 800600e:	605a      	strne	r2, [r3, #4]
 8006010:	e7ec      	b.n	8005fec <_malloc_r+0xa0>
 8006012:	4623      	mov	r3, r4
 8006014:	6864      	ldr	r4, [r4, #4]
 8006016:	e7b2      	b.n	8005f7e <_malloc_r+0x32>
 8006018:	4634      	mov	r4, r6
 800601a:	6876      	ldr	r6, [r6, #4]
 800601c:	e7b9      	b.n	8005f92 <_malloc_r+0x46>
 800601e:	230c      	movs	r3, #12
 8006020:	603b      	str	r3, [r7, #0]
 8006022:	4638      	mov	r0, r7
 8006024:	f000 f84c 	bl	80060c0 <__malloc_unlock>
 8006028:	e7a1      	b.n	8005f6e <_malloc_r+0x22>
 800602a:	6025      	str	r5, [r4, #0]
 800602c:	e7de      	b.n	8005fec <_malloc_r+0xa0>
 800602e:	bf00      	nop
 8006030:	20000268 	.word	0x20000268

08006034 <_realloc_r>:
 8006034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006038:	4680      	mov	r8, r0
 800603a:	4614      	mov	r4, r2
 800603c:	460e      	mov	r6, r1
 800603e:	b921      	cbnz	r1, 800604a <_realloc_r+0x16>
 8006040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006044:	4611      	mov	r1, r2
 8006046:	f7ff bf81 	b.w	8005f4c <_malloc_r>
 800604a:	b92a      	cbnz	r2, 8006058 <_realloc_r+0x24>
 800604c:	f7ff ff12 	bl	8005e74 <_free_r>
 8006050:	4625      	mov	r5, r4
 8006052:	4628      	mov	r0, r5
 8006054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006058:	f000 f838 	bl	80060cc <_malloc_usable_size_r>
 800605c:	4284      	cmp	r4, r0
 800605e:	4607      	mov	r7, r0
 8006060:	d802      	bhi.n	8006068 <_realloc_r+0x34>
 8006062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006066:	d812      	bhi.n	800608e <_realloc_r+0x5a>
 8006068:	4621      	mov	r1, r4
 800606a:	4640      	mov	r0, r8
 800606c:	f7ff ff6e 	bl	8005f4c <_malloc_r>
 8006070:	4605      	mov	r5, r0
 8006072:	2800      	cmp	r0, #0
 8006074:	d0ed      	beq.n	8006052 <_realloc_r+0x1e>
 8006076:	42bc      	cmp	r4, r7
 8006078:	4622      	mov	r2, r4
 800607a:	4631      	mov	r1, r6
 800607c:	bf28      	it	cs
 800607e:	463a      	movcs	r2, r7
 8006080:	f7ff fed0 	bl	8005e24 <memcpy>
 8006084:	4631      	mov	r1, r6
 8006086:	4640      	mov	r0, r8
 8006088:	f7ff fef4 	bl	8005e74 <_free_r>
 800608c:	e7e1      	b.n	8006052 <_realloc_r+0x1e>
 800608e:	4635      	mov	r5, r6
 8006090:	e7df      	b.n	8006052 <_realloc_r+0x1e>
	...

08006094 <_sbrk_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4d06      	ldr	r5, [pc, #24]	; (80060b0 <_sbrk_r+0x1c>)
 8006098:	2300      	movs	r3, #0
 800609a:	4604      	mov	r4, r0
 800609c:	4608      	mov	r0, r1
 800609e:	602b      	str	r3, [r5, #0]
 80060a0:	f7fb f832 	bl	8001108 <_sbrk>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_sbrk_r+0x1a>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_sbrk_r+0x1a>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	20000270 	.word	0x20000270

080060b4 <__malloc_lock>:
 80060b4:	4801      	ldr	r0, [pc, #4]	; (80060bc <__malloc_lock+0x8>)
 80060b6:	f000 b811 	b.w	80060dc <__retarget_lock_acquire_recursive>
 80060ba:	bf00      	nop
 80060bc:	20000274 	.word	0x20000274

080060c0 <__malloc_unlock>:
 80060c0:	4801      	ldr	r0, [pc, #4]	; (80060c8 <__malloc_unlock+0x8>)
 80060c2:	f000 b80c 	b.w	80060de <__retarget_lock_release_recursive>
 80060c6:	bf00      	nop
 80060c8:	20000274 	.word	0x20000274

080060cc <_malloc_usable_size_r>:
 80060cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060d0:	1f18      	subs	r0, r3, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	bfbc      	itt	lt
 80060d6:	580b      	ldrlt	r3, [r1, r0]
 80060d8:	18c0      	addlt	r0, r0, r3
 80060da:	4770      	bx	lr

080060dc <__retarget_lock_acquire_recursive>:
 80060dc:	4770      	bx	lr

080060de <__retarget_lock_release_recursive>:
 80060de:	4770      	bx	lr

080060e0 <_init>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr

080060ec <_fini>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	bf00      	nop
 80060f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f2:	bc08      	pop	{r3}
 80060f4:	469e      	mov	lr, r3
 80060f6:	4770      	bx	lr
